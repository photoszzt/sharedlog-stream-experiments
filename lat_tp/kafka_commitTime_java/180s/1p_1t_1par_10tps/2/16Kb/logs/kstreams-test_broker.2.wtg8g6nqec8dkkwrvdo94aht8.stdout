===> User
uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)
===> Configuring ...
===> Running preflight checks ... 
===> Check if /var/lib/kafka/data is writable ...
===> Check if Zookeeper is healthy ...
0 [main] DEBUG io.confluent.admin.utils.cli.ZookeeperReadyCommand  - Arguments Namespace(zookeeper_connect=zookeeper:2181, timeout=40000). 
3 [main] DEBUG io.confluent.admin.utils.ClusterStatus  - Check if Zookeeper is ready: zookeeper:2181 
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:host.name=broker-2
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.version=11.0.14.1
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.vendor=Azul Systems, Inc.
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.home=/usr/lib/jvm/zulu11-ca
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.class.path=/usr/share/java/cp-base-new/jackson-dataformat-csv-2.12.3.jar:/usr/share/java/cp-base-new/confluent-log4j-1.2.17-cp10.jar:/usr/share/java/cp-base-new/jackson-dataformat-yaml-2.12.3.jar:/usr/share/java/cp-base-new/jackson-annotations-2.12.3.jar:/usr/share/java/cp-base-new/lz4-java-1.8.0.jar:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar:/usr/share/java/cp-base-new/scala-reflect-2.13.5.jar:/usr/share/java/cp-base-new/disk-usage-agent-7.1.0.jar:/usr/share/java/cp-base-new/logredactor-1.0.10.jar:/usr/share/java/cp-base-new/utility-belt-7.1.0.jar:/usr/share/java/cp-base-new/commons-cli-1.4.jar:/usr/share/java/cp-base-new/kafka-storage-api-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jackson-module-scala_2.13-2.12.3.jar:/usr/share/java/cp-base-new/kafka-raft-7.1.0-ccs.jar:/usr/share/java/cp-base-new/common-utils-7.1.0.jar:/usr/share/java/cp-base-new/kafka-metadata-7.1.0-ccs.jar:/usr/share/java/cp-base-new/slf4j-api-1.7.30.jar:/usr/share/java/cp-base-new/logredactor-metrics-1.0.10.jar:/usr/share/java/cp-base-new/kafka-clients-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jolokia-core-1.6.2.jar:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar:/usr/share/java/cp-base-new/scala-java8-compat_2.13-1.0.0.jar:/usr/share/java/cp-base-new/zstd-jni-1.5.0-4.jar:/usr/share/java/cp-base-new/scala-library-2.13.5.jar:/usr/share/java/cp-base-new/gson-2.8.6.jar:/usr/share/java/cp-base-new/kafka-server-common-7.1.0-ccs.jar:/usr/share/java/cp-base-new/audience-annotations-0.5.0.jar:/usr/share/java/cp-base-new/paranamer-2.8.jar:/usr/share/java/cp-base-new/argparse4j-0.7.0.jar:/usr/share/java/cp-base-new/jackson-datatype-jdk8-2.12.3.jar:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar:/usr/share/java/cp-base-new/snappy-java-1.1.8.4.jar:/usr/share/java/cp-base-new/jopt-simple-5.0.4.jar:/usr/share/java/cp-base-new/json-simple-1.1.1.jar:/usr/share/java/cp-base-new/kafka_2.13-7.1.0-ccs.jar:/usr/share/java/cp-base-new/kafka-storage-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jose4j-0.7.8.jar:/usr/share/java/cp-base-new/zookeeper-jute-3.6.3.jar:/usr/share/java/cp-base-new/zookeeper-3.6.3.jar:/usr/share/java/cp-base-new/jolokia-jvm-1.6.2-agent.jar:/usr/share/java/cp-base-new/jackson-core-2.12.3.jar:/usr/share/java/cp-base-new/jackson-databind-2.12.3.jar:/usr/share/java/cp-base-new/minimal-json-0.9.5.jar:/usr/share/java/cp-base-new/scala-collection-compat_2.13-2.4.4.jar:/usr/share/java/cp-base-new/scala-logging_2.13-3.9.3.jar:/usr/share/java/cp-base-new/snakeyaml-1.27.jar:/usr/share/java/cp-base-new/re2j-1.6.jar:/usr/share/java/cp-base-new/metrics-core-4.1.12.1.jar:/usr/share/java/cp-base-new/metrics-core-2.2.0.jar
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.io.tmpdir=/tmp
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.compiler=<NA>
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.name=Linux
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.arch=amd64
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.version=5.10.39-zjiabuild
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.name=appuser
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.home=/home/appuser
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.dir=/home/appuser
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.free=237MB
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.max=3886MB
18 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.total=244MB
20 [main] INFO org.apache.zookeeper.ZooKeeper  - Initiating client connection, connectString=zookeeper:2181 sessionTimeout=40000 watcher=io.confluent.admin.utils.ZookeeperConnectionWatcher@78ac1102
24 [main] INFO org.apache.zookeeper.common.X509Util  - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation
29 [main] INFO org.apache.zookeeper.ClientCnxnSocket  - jute.maxbuffer value is 1048575 Bytes
36 [main] INFO org.apache.zookeeper.ClientCnxn  - zookeeper.request.timeout value is 0. feature enabled=false
46 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.SaslServerPrincipal  - Canonicalized address to kstreams-test_zookeeper.1.z8cnfhivbsd9dj5r96wgtzmf1.kstreams-test_default
47 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Opening socket connection to server zookeeper/172.99.0.12:2181.
47 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - SASL config status: Will not attempt to authenticate using SASL (unknown error)
56 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Socket connection established, initiating session, client: /172.99.0.4:49870, server: zookeeper/172.99.0.12:2181
57 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxn  - Session establishment request sent on zookeeper/172.99.0.12:2181
76 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Session establishment complete on server zookeeper/172.99.0.12:2181, session id = 0x100000e1e380000, negotiated timeout = 40000
80 [main] DEBUG org.apache.zookeeper.ZooKeeper  - Closing session: 0x100000e1e380000
80 [main] DEBUG org.apache.zookeeper.ClientCnxn  - Closing client for session: 0x100000e1e380000
87 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxn  - Reading reply session id: 0x100000e1e380000, packet:: clientPath:null serverPath:null finished:false header:: 1,-11  replyHeader:: 1,2,0  request:: null response:: null
87 [main-SendThread(zookeeper:2181)] WARN org.apache.zookeeper.ClientCnxn  - An exception was thrown while closing send thread for session 0x100000e1e380000.
EndOfStreamException: Unable to read additional data from server sessionid 0x100000e1e380000, likely server has closed socket
	at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)
88 [main] DEBUG org.apache.zookeeper.ClientCnxn  - Disconnecting client for session: 0x100000e1e380000
192 [main] INFO org.apache.zookeeper.ZooKeeper  - Session: 0x100000e1e380000 closed
192 [main-EventThread] INFO org.apache.zookeeper.ClientCnxn  - EventThread shut down for session: 0x100000e1e380000
===> Launching ... 
===> Launching kafka ... 
[2022-10-04 16:45:50,526] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)
[2022-10-04 16:45:50,839] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)
[2022-10-04 16:45:50,921] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)
[2022-10-04 16:45:50,924] INFO starting (kafka.server.KafkaServer)
[2022-10-04 16:45:50,924] INFO Connecting to zookeeper on zookeeper:2181 (kafka.server.KafkaServer)
[2022-10-04 16:45:50,939] INFO [ZooKeeperClient Kafka server] Initializing a new session to zookeeper:2181. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:45:50,943] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,943] INFO Client environment:host.name=broker-2 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,943] INFO Client environment:java.version=11.0.14.1 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.class.path=/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/lz4-java-1.8.0.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/connect-json-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/kafka-raft-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/logredactor-metrics-1.0.8.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.22.1.1.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jetty-server-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-streams-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.73.Final.jar:/usr/bin/../share/java/kafka/netty-tcnative-classes-2.0.46.Final.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/kafka-shell-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-4.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/connect-mirror-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/logredactor-1.0.8.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.73.Final.jar:/usr/bin/../share/java/kafka/netty-transport-classes-epoll-4.1.73.Final.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/trogdor-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp8.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/netty-common-4.1.73.Final.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.73.Final.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.4.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/kafka-tools-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/connect-runtime-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-storage-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jose4j-0.7.8.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/minimal-json-0.9.5.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.73.Final.jar:/usr/bin/../share/java/kafka/re2j-1.6.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.version=5.10.39-zjiabuild (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:user.name=appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:user.home=/home/appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:user.dir=/home/appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.memory.free=1008MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.memory.max=1024MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,944] INFO Client environment:os.memory.total=1024MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,946] INFO Initiating client connection, connectString=zookeeper:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@232a7d73 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:45:50,951] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)
[2022-10-04 16:45:50,956] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:45:50,958] INFO [ZooKeeperClient Kafka server] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:45:50,963] INFO Opening socket connection to server zookeeper/172.99.0.12:2181. (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:45:50,964] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:45:50,968] INFO Socket connection established, initiating session, client: /172.99.0.4:49872, server: zookeeper/172.99.0.12:2181 (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:45:50,974] INFO Session establishment complete on server zookeeper/172.99.0.12:2181, session id = 0x100000e1e380001, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:45:50,977] INFO [ZooKeeperClient Kafka server] Connected. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:45:51,069] INFO [feature-zk-node-event-process-thread]: Starting (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)
[2022-10-04 16:45:51,080] INFO Feature ZK node at path: /feature does not exist (kafka.server.FinalizedFeatureChangeListener)
[2022-10-04 16:45:51,080] INFO Cleared cache (kafka.server.FinalizedFeatureCache)
[2022-10-04 16:45:51,259] INFO Cluster ID = 9jaHcxHMSDq48_ke_riqTA (kafka.server.KafkaServer)
[2022-10-04 16:45:51,262] WARN No meta.properties file under dir /var/lib/kafka/data/meta.properties (kafka.server.BrokerMetadataCheckpoint)
[2022-10-04 16:45:51,299] INFO KafkaConfig values: 
	advertised.listeners = PLAINTEXT://172.99.0.4:9092
	alter.config.policy.class.name = null
	alter.log.dirs.replication.quota.window.num = 11
	alter.log.dirs.replication.quota.window.size.seconds = 1
	authorizer.class.name = 
	auto.create.topics.enable = false
	auto.leader.rebalance.enable = true
	background.threads = 10
	broker.heartbeat.interval.ms = 2000
	broker.id = 2
	broker.id.generation.enable = true
	broker.rack = null
	broker.session.timeout.ms = 9000
	client.quota.callback.class = null
	compression.type = producer
	connection.failed.authentication.delay.ms = 100
	connections.max.idle.ms = 600000
	connections.max.reauth.ms = 0
	control.plane.listener.name = null
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.listener.names = null
	controller.quorum.append.linger.ms = 25
	controller.quorum.election.backoff.max.ms = 1000
	controller.quorum.election.timeout.ms = 1000
	controller.quorum.fetch.timeout.ms = 2000
	controller.quorum.request.timeout.ms = 2000
	controller.quorum.retry.backoff.ms = 20
	controller.quorum.voters = []
	controller.quota.window.num = 11
	controller.quota.window.size.seconds = 1
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delegation.token.expiry.check.interval.ms = 3600000
	delegation.token.expiry.time.ms = 86400000
	delegation.token.master.key = null
	delegation.token.max.lifetime.ms = 604800000
	delegation.token.secret.key = null
	delete.records.purgatory.purge.interval.requests = 1
	delete.topic.enable = true
	fetch.max.bytes = 57671680
	fetch.purgatory.purge.interval.requests = 1000
	group.initial.rebalance.delay.ms = 3000
	group.max.session.timeout.ms = 1800000
	group.max.size = 2147483647
	group.min.session.timeout.ms = 6000
	initial.broker.registration.timeout.ms = 60000
	inter.broker.listener.name = null
	inter.broker.protocol.version = 3.1-IV0
	kafka.metrics.polling.interval.secs = 10
	kafka.metrics.reporters = []
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = PLAINTEXT:PLAINTEXT
	listeners = PLAINTEXT://0.0.0.0:9092
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.max.compaction.lag.ms = 9223372036854775807
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dirs = /var/lib/kafka/data
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.flush.start.offset.checkpoint.interval.ms = 60000
	log.index.interval.bytes = 4096
	log.index.size.max.bytes = 10485760
	log.message.downconversion.enable = true
	log.message.format.version = 3.0-IV1
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connection.creation.rate = 2147483647
	max.connections = 2147483647
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	max.incremental.fetch.session.cache.slots = 1000
	message.max.bytes = 1048588
	metadata.log.dir = null
	metadata.log.max.record.bytes.between.snapshots = 20971520
	metadata.log.segment.bytes = 1073741824
	metadata.log.segment.min.bytes = 8388608
	metadata.log.segment.ms = 604800000
	metadata.max.retention.bytes = -1
	metadata.max.retention.ms = 604800000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 3
	node.id = 2
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.alter.log.dirs.threads = null
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 10080
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 3
	offsets.topic.segment.bytes = 104857600
	password.encoder.cipher.algorithm = AES/CBC/PKCS5Padding
	password.encoder.iterations = 4096
	password.encoder.key.length = 128
	password.encoder.keyfactory.algorithm = null
	password.encoder.old.secret = null
	password.encoder.secret = null
	principal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder
	process.roles = []
	producer.purgatory.purge.interval.requests = 1000
	queued.max.request.bytes = -1
	queued.max.requests = 500
	quota.window.num = 11
	quota.window.size.seconds = 1
	remote.log.index.file.cache.total.size.bytes = 1073741824
	remote.log.manager.task.interval.ms = 30000
	remote.log.manager.task.retry.backoff.max.ms = 30000
	remote.log.manager.task.retry.backoff.ms = 500
	remote.log.manager.task.retry.jitter = 0.2
	remote.log.manager.thread.pool.size = 10
	remote.log.metadata.manager.class.name = null
	remote.log.metadata.manager.class.path = null
	remote.log.metadata.manager.impl.prefix = null
	remote.log.metadata.manager.listener.name = null
	remote.log.reader.max.pending.tasks = 100
	remote.log.reader.threads = 10
	remote.log.storage.manager.class.name = null
	remote.log.storage.manager.class.path = null
	remote.log.storage.manager.impl.prefix = null
	remote.log.storage.system.enable = false
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 30000
	replica.selector.class = null
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	sasl.client.callback.handler.class = null
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism.controller.protocol = GSSAPI
	sasl.mechanism.inter.broker.protocol = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	sasl.server.callback.handler.class = null
	security.inter.broker.protocol = PLAINTEXT
	security.providers = null
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.cipher.suites = []
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.principal.mapping.rules = DEFAULT
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.abort.timed.out.transaction.cleanup.interval.ms = 10000
	transaction.max.timeout.ms = 900000
	transaction.remove.expired.transaction.cleanup.interval.ms = 3600000
	transaction.state.log.load.buffer.size = 5242880
	transaction.state.log.min.isr = 2
	transaction.state.log.num.partitions = 50
	transaction.state.log.replication.factor = 3
	transaction.state.log.segment.bytes = 104857600
	transactional.id.expiration.ms = 604800000
	unclean.leader.election.enable = false
	zookeeper.clientCnxnSocket = null
	zookeeper.connect = zookeeper:2181
	zookeeper.connection.timeout.ms = null
	zookeeper.max.in.flight.requests = 10
	zookeeper.session.timeout.ms = 18000
	zookeeper.set.acl = false
	zookeeper.ssl.cipher.suites = null
	zookeeper.ssl.client.enable = false
	zookeeper.ssl.crl.enable = false
	zookeeper.ssl.enabled.protocols = null
	zookeeper.ssl.endpoint.identification.algorithm = HTTPS
	zookeeper.ssl.keystore.location = null
	zookeeper.ssl.keystore.password = null
	zookeeper.ssl.keystore.type = null
	zookeeper.ssl.ocsp.enable = false
	zookeeper.ssl.protocol = TLSv1.2
	zookeeper.ssl.truststore.location = null
	zookeeper.ssl.truststore.password = null
	zookeeper.ssl.truststore.type = null
	zookeeper.sync.time.ms = 2000
 (kafka.server.KafkaConfig)
[2022-10-04 16:45:51,305] INFO KafkaConfig values: 
	advertised.listeners = PLAINTEXT://172.99.0.4:9092
	alter.config.policy.class.name = null
	alter.log.dirs.replication.quota.window.num = 11
	alter.log.dirs.replication.quota.window.size.seconds = 1
	authorizer.class.name = 
	auto.create.topics.enable = false
	auto.leader.rebalance.enable = true
	background.threads = 10
	broker.heartbeat.interval.ms = 2000
	broker.id = 2
	broker.id.generation.enable = true
	broker.rack = null
	broker.session.timeout.ms = 9000
	client.quota.callback.class = null
	compression.type = producer
	connection.failed.authentication.delay.ms = 100
	connections.max.idle.ms = 600000
	connections.max.reauth.ms = 0
	control.plane.listener.name = null
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.listener.names = null
	controller.quorum.append.linger.ms = 25
	controller.quorum.election.backoff.max.ms = 1000
	controller.quorum.election.timeout.ms = 1000
	controller.quorum.fetch.timeout.ms = 2000
	controller.quorum.request.timeout.ms = 2000
	controller.quorum.retry.backoff.ms = 20
	controller.quorum.voters = []
	controller.quota.window.num = 11
	controller.quota.window.size.seconds = 1
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delegation.token.expiry.check.interval.ms = 3600000
	delegation.token.expiry.time.ms = 86400000
	delegation.token.master.key = null
	delegation.token.max.lifetime.ms = 604800000
	delegation.token.secret.key = null
	delete.records.purgatory.purge.interval.requests = 1
	delete.topic.enable = true
	fetch.max.bytes = 57671680
	fetch.purgatory.purge.interval.requests = 1000
	group.initial.rebalance.delay.ms = 3000
	group.max.session.timeout.ms = 1800000
	group.max.size = 2147483647
	group.min.session.timeout.ms = 6000
	initial.broker.registration.timeout.ms = 60000
	inter.broker.listener.name = null
	inter.broker.protocol.version = 3.1-IV0
	kafka.metrics.polling.interval.secs = 10
	kafka.metrics.reporters = []
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = PLAINTEXT:PLAINTEXT
	listeners = PLAINTEXT://0.0.0.0:9092
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.max.compaction.lag.ms = 9223372036854775807
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dirs = /var/lib/kafka/data
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.flush.start.offset.checkpoint.interval.ms = 60000
	log.index.interval.bytes = 4096
	log.index.size.max.bytes = 10485760
	log.message.downconversion.enable = true
	log.message.format.version = 3.0-IV1
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connection.creation.rate = 2147483647
	max.connections = 2147483647
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	max.incremental.fetch.session.cache.slots = 1000
	message.max.bytes = 1048588
	metadata.log.dir = null
	metadata.log.max.record.bytes.between.snapshots = 20971520
	metadata.log.segment.bytes = 1073741824
	metadata.log.segment.min.bytes = 8388608
	metadata.log.segment.ms = 604800000
	metadata.max.retention.bytes = -1
	metadata.max.retention.ms = 604800000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 3
	node.id = 2
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.alter.log.dirs.threads = null
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 10080
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 3
	offsets.topic.segment.bytes = 104857600
	password.encoder.cipher.algorithm = AES/CBC/PKCS5Padding
	password.encoder.iterations = 4096
	password.encoder.key.length = 128
	password.encoder.keyfactory.algorithm = null
	password.encoder.old.secret = null
	password.encoder.secret = null
	principal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder
	process.roles = []
	producer.purgatory.purge.interval.requests = 1000
	queued.max.request.bytes = -1
	queued.max.requests = 500
	quota.window.num = 11
	quota.window.size.seconds = 1
	remote.log.index.file.cache.total.size.bytes = 1073741824
	remote.log.manager.task.interval.ms = 30000
	remote.log.manager.task.retry.backoff.max.ms = 30000
	remote.log.manager.task.retry.backoff.ms = 500
	remote.log.manager.task.retry.jitter = 0.2
	remote.log.manager.thread.pool.size = 10
	remote.log.metadata.manager.class.name = null
	remote.log.metadata.manager.class.path = null
	remote.log.metadata.manager.impl.prefix = null
	remote.log.metadata.manager.listener.name = null
	remote.log.reader.max.pending.tasks = 100
	remote.log.reader.threads = 10
	remote.log.storage.manager.class.name = null
	remote.log.storage.manager.class.path = null
	remote.log.storage.manager.impl.prefix = null
	remote.log.storage.system.enable = false
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 30000
	replica.selector.class = null
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	sasl.client.callback.handler.class = null
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism.controller.protocol = GSSAPI
	sasl.mechanism.inter.broker.protocol = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	sasl.server.callback.handler.class = null
	security.inter.broker.protocol = PLAINTEXT
	security.providers = null
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.cipher.suites = []
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.principal.mapping.rules = DEFAULT
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.abort.timed.out.transaction.cleanup.interval.ms = 10000
	transaction.max.timeout.ms = 900000
	transaction.remove.expired.transaction.cleanup.interval.ms = 3600000
	transaction.state.log.load.buffer.size = 5242880
	transaction.state.log.min.isr = 2
	transaction.state.log.num.partitions = 50
	transaction.state.log.replication.factor = 3
	transaction.state.log.segment.bytes = 104857600
	transactional.id.expiration.ms = 604800000
	unclean.leader.election.enable = false
	zookeeper.clientCnxnSocket = null
	zookeeper.connect = zookeeper:2181
	zookeeper.connection.timeout.ms = null
	zookeeper.max.in.flight.requests = 10
	zookeeper.session.timeout.ms = 18000
	zookeeper.set.acl = false
	zookeeper.ssl.cipher.suites = null
	zookeeper.ssl.client.enable = false
	zookeeper.ssl.crl.enable = false
	zookeeper.ssl.enabled.protocols = null
	zookeeper.ssl.endpoint.identification.algorithm = HTTPS
	zookeeper.ssl.keystore.location = null
	zookeeper.ssl.keystore.password = null
	zookeeper.ssl.keystore.type = null
	zookeeper.ssl.ocsp.enable = false
	zookeeper.ssl.protocol = TLSv1.2
	zookeeper.ssl.truststore.location = null
	zookeeper.ssl.truststore.password = null
	zookeeper.ssl.truststore.type = null
	zookeeper.sync.time.ms = 2000
 (kafka.server.KafkaConfig)
[2022-10-04 16:45:51,339] INFO [ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:45:51,339] INFO [ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:45:51,341] INFO [ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:45:51,342] INFO [ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:45:51,378] INFO Loading logs from log dirs ArraySeq(/var/lib/kafka/data) (kafka.log.LogManager)
[2022-10-04 16:45:51,382] INFO Attempting recovery for all logs in /var/lib/kafka/data since no clean shutdown file was found (kafka.log.LogManager)
[2022-10-04 16:45:51,387] INFO Loaded 0 logs in 9ms. (kafka.log.LogManager)
[2022-10-04 16:45:51,387] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)
[2022-10-04 16:45:51,389] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)
[2022-10-04 16:45:51,400] INFO Starting the log cleaner (kafka.log.LogCleaner)
[2022-10-04 16:45:51,484] INFO [kafka-log-cleaner-thread-0]: Starting (kafka.log.LogCleaner)
[2022-10-04 16:45:51,723] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Starting (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:45:51,861] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)
[2022-10-04 16:45:51,865] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.Acceptor)
[2022-10-04 16:45:51,891] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Created data-plane acceptor and processors for endpoint : ListenerName(PLAINTEXT) (kafka.network.SocketServer)
[2022-10-04 16:45:51,897] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Starting (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:45:51,918] INFO [ExpirationReaper-2-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:51,919] INFO [ExpirationReaper-2-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:51,920] INFO [ExpirationReaper-2-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:51,921] INFO [ExpirationReaper-2-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:51,935] INFO [LogDirFailureHandler]: Starting (kafka.server.ReplicaManager$LogDirFailureHandler)
[2022-10-04 16:45:51,959] INFO Creating /brokers/ids/2 (is it secure? false) (kafka.zk.KafkaZkClient)
[2022-10-04 16:45:51,978] INFO Stat of the created znode at /brokers/ids/2 is: 27,27,1664901951970,1664901951970,1,0,0,72057654674456577,204,0,27
 (kafka.zk.KafkaZkClient)
[2022-10-04 16:45:51,979] INFO Registered broker 2 at path /brokers/ids/2 with addresses: PLAINTEXT://172.99.0.4:9092, czxid (broker epoch): 27 (kafka.zk.KafkaZkClient)
[2022-10-04 16:45:52,029] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-10-04 16:45:52,041] INFO [ExpirationReaper-2-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:52,046] INFO [ExpirationReaper-2-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:52,047] INFO [ExpirationReaper-2-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:52,047] INFO Successfully created /controller_epoch with initial epoch 0 (kafka.zk.KafkaZkClient)
[2022-10-04 16:45:52,053] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-10-04 16:45:52,057] INFO [Controller id=2] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-10-04 16:45:52,060] INFO Feature ZK node created at path: /feature (kafka.server.FinalizedFeatureChangeListener)
[2022-10-04 16:45:52,065] INFO [GroupCoordinator 2]: Starting up. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:45:52,069] INFO [GroupCoordinator 2]: Startup complete. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:45:52,086] INFO Updated cache from existing <empty> to latest FinalizedFeaturesAndEpoch(features=Features{}, epoch=0). (kafka.server.FinalizedFeatureCache)
[2022-10-04 16:45:52,086] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2022-10-04 16:45:52,087] INFO [TransactionCoordinator id=2] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:45:52,090] INFO [Transaction Marker Channel Manager 2]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)
[2022-10-04 16:45:52,090] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-10-04 16:45:52,090] INFO [TransactionCoordinator id=2] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:45:52,093] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-10-04 16:45:52,095] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2022-10-04 16:45:52,108] INFO [Controller id=2] Initialized broker epochs cache: HashMap(2 -> 27) (kafka.controller.KafkaController)
[2022-10-04 16:45:52,113] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2022-10-04 16:45:52,118] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:45:52,124] INFO [ExpirationReaper-2-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:45:52,125] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:45:52,126] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2022-10-04 16:45:52,126] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-10-04 16:45:52,127] INFO [Controller id=2] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-10-04 16:45:52,127] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-10-04 16:45:52,129] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,129] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,129] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-10-04 16:45:52,130] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-10-04 16:45:52,131] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2022-10-04 16:45:52,133] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2) for 0 partitions (state.change.logger)
[2022-10-04 16:45:52,140] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:45:52,141] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:45:52,144] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:45:52,145] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:45:52,145] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)
[2022-10-04 16:45:52,145] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:45:52,146] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:45:52,147] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.4:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:45:52,149] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:45:52,149] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-10-04 16:45:52,153] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Starting socket server acceptors and processors (kafka.network.SocketServer)
[2022-10-04 16:45:52,154] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,155] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,155] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,155] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-10-04 16:45:52,156] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-10-04 16:45:52,158] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started data-plane acceptor and processor(s) for endpoint : ListenerName(PLAINTEXT) (kafka.network.SocketServer)
[2022-10-04 16:45:52,159] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started socket server acceptors and processors (kafka.network.SocketServer)
[2022-10-04 16:45:52,164] INFO Kafka version: 7.1.0-ccs (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:45:52,164] INFO Kafka commitId: c86722379ab997cc (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:45:52,164] INFO Kafka startTimeMs: 1664901952159 (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:45:52,166] INFO [KafkaServer id=2] started (kafka.server.KafkaServer)
[2022-10-04 16:45:52,171] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-10-04 16:45:52,200] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Recorded new controller, from now on will use broker 172.99.0.4:9092 (id: 2 rack: null) (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:45:52,203] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:45:52,231] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Recorded new controller, from now on will use broker 172.99.0.4:9092 (id: 2 rack: null) (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:45:57,172] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-10-04 16:45:57,172] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-10-04 16:46:07,819] INFO [Controller id=2] Newly added brokers: 4, deleted brokers: , bounced brokers: , all live brokers: 2,4 (kafka.controller.KafkaController)
[2022-10-04 16:46:07,819] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 4 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:46:07,823] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:46:07,824] INFO [Controller id=2] New broker startup callback for 4 (kafka.controller.KafkaController)
[2022-10-04 16:46:07,824] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2) for 0 partitions (state.change.logger)
[2022-10-04 16:46:07,825] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(4) for 0 partitions (state.change.logger)
[2022-10-04 16:46:07,826] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.6:9092 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:46:07,827] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:46:07,827] DEBUG [Controller id=2] Register BrokerModifications handler for List(4) (kafka.controller.KafkaController)
[2022-10-04 16:46:07,829] INFO [Controller id=2] Updated broker epochs cache: HashMap(2 -> 27, 4 -> 53) (kafka.controller.KafkaController)
[2022-10-04 16:46:08,022] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:46:09,845] INFO [Controller id=2] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 1,2,4 (kafka.controller.KafkaController)
[2022-10-04 16:46:09,846] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:46:09,849] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:46:09,849] INFO [Controller id=2] New broker startup callback for 1 (kafka.controller.KafkaController)
[2022-10-04 16:46:09,849] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2, 4) for 0 partitions (state.change.logger)
[2022-10-04 16:46:09,850] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 0 partitions (state.change.logger)
[2022-10-04 16:46:09,850] DEBUG [Controller id=2] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2022-10-04 16:46:09,851] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.3:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:46:09,851] INFO [Controller id=2] Updated broker epochs cache: HashMap(1 -> 69, 2 -> 27, 4 -> 53) (kafka.controller.KafkaController)
[2022-10-04 16:46:09,851] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:46:09,852] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:46:10,067] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:46:10,979] INFO [Controller id=2] Newly added brokers: 3, deleted brokers: , bounced brokers: , all live brokers: 1,2,3,4 (kafka.controller.KafkaController)
[2022-10-04 16:46:10,979] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:46:10,982] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:46:10,982] INFO [Controller id=2] New broker startup callback for 3 (kafka.controller.KafkaController)
[2022-10-04 16:46:10,982] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 4) for 0 partitions (state.change.logger)
[2022-10-04 16:46:10,983] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(3) for 0 partitions (state.change.logger)
[2022-10-04 16:46:10,983] DEBUG [Controller id=2] Register BrokerModifications handler for List(3) (kafka.controller.KafkaController)
[2022-10-04 16:46:10,984] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.5:9092 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:46:10,984] INFO [Controller id=2] Updated broker epochs cache: HashMap(1 -> 69, 2 -> 27, 3 -> 85, 4 -> 53) (kafka.controller.KafkaController)
[2022-10-04 16:46:10,985] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 3 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:46:10,985] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:46:10,985] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:46:11,184] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:13,969] INFO Creating topic src with configuration {min.insync.replicas=3} and initial partition assignment HashMap(0 -> ArrayBuffer(3, 4, 1)) (kafka.zk.AdminZkClient)
[2022-10-04 16:47:13,969] INFO Creating topic output with configuration {min.insync.replicas=3} and initial partition assignment HashMap(0 -> ArrayBuffer(1, 2, 3)) (kafka.zk.AdminZkClient)
[2022-10-04 16:47:13,992] INFO [Controller id=2] New topics: [Set(output, src)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(output,Some(royH795nQXmlVCwTgRTJ6A),Map(output-0 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=))), TopicIdReplicaAssignment(src,Some(B5OdhlvvQ9Gtj71qSRFknQ),Map(src-0 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:47:13,993] INFO [Controller id=2] New partition creation callback for output-0,src-0 (kafka.controller.KafkaController)
[2022-10-04 16:47:13,995] INFO [Controller id=2 epoch=1] Changed partition output-0 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:13,995] INFO [Controller id=2 epoch=1] Changed partition src-0 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:13,995] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:13,999] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:14,022] INFO [Controller id=2 epoch=1] Changed partition output-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:14,023] INFO [Controller id=2 epoch=1] Changed partition src-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:14,025] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition output-0 (state.change.logger)
[2022-10-04 16:47:14,025] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition src-0 (state.change.logger)
[2022-10-04 16:47:14,026] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 1 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:47:14,028] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition output-0 (state.change.logger)
[2022-10-04 16:47:14,028] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 2 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:47:14,028] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition output-0 (state.change.logger)
[2022-10-04 16:47:14,028] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition src-0 (state.change.logger)
[2022-10-04 16:47:14,028] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 1 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:47:14,028] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition src-0 (state.change.logger)
[2022-10-04 16:47:14,028] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:47:14,028] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 2 partitions (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:14,030] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:14,032] INFO [Broker id=2] Handling LeaderAndIsr request correlationId 4 from controller 2 for 1 partitions (state.change.logger)
[2022-10-04 16:47:14,033] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 4 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:14,049] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 4 from controller 2 epoch 1 starting the become-follower transition for partition output-0 with leader 1 (state.change.logger)
[2022-10-04 16:47:14,101] INFO [LogLoader partition=output-0, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:14,113] INFO Created log for partition output-0 in /var/lib/kafka/data/output-0 with properties {min.insync.replicas=3} (kafka.log.LogManager)
[2022-10-04 16:47:14,114] INFO [Partition output-0 broker=2] No checkpointed highwatermark is found for partition output-0 (kafka.cluster.Partition)
[2022-10-04 16:47:14,115] INFO [Partition output-0 broker=2] Log loaded for partition output-0 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:14,116] INFO [Broker id=2] Follower output-0 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:14,116] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(output-0) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:14,118] INFO [Broker id=2] Stopped fetchers as part of become-follower request from controller 2 epoch 1 with correlation id 4 for 1 partitions (state.change.logger)
[2022-10-04 16:47:14,133] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:14,135] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 1 for partitions Map(output-0 -> InitialFetchState(Some(royH795nQXmlVCwTgRTJ6A),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:14,136] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 4 from controller 2 epoch 1 for the become-follower transition for partition output-0 with leader 1 (state.change.logger)
[2022-10-04 16:47:14,136] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition output-0 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:14,137] INFO [UnifiedLog partition=output-0, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:14,148] INFO [Broker id=2] Finished LeaderAndIsr request in 117ms correlationId 4 from controller 2 for 1 partitions (state.change.logger)
[2022-10-04 16:47:14,150] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=B5OdhlvvQ9Gtj71qSRFknQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 3 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:14,151] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=royH795nQXmlVCwTgRTJ6A, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 4 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:14,156] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 4 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:14,157] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition output-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 5 (state.change.logger)
[2022-10-04 16:47:14,157] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition src-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 5 (state.change.logger)
[2022-10-04 16:47:14,158] INFO [Broker id=2] Add 2 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 5 (state.change.logger)
[2022-10-04 16:47:14,164] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 5 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:14,167] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=royH795nQXmlVCwTgRTJ6A, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)]), LeaderAndIsrTopicError(topicId=B5OdhlvvQ9Gtj71qSRFknQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 2 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:14,170] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=royH795nQXmlVCwTgRTJ6A, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)]), LeaderAndIsrTopicError(topicId=B5OdhlvvQ9Gtj71qSRFknQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 1 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:14,173] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 3 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:14,176] WARN [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Received UNKNOWN_TOPIC_ID from the leader for partition output-0. This error may be returned transiently when the partition is being created or deleted, but it is not expected to persist. (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:14,176] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:29,344] INFO [Controller id=2] New topics: [Set(__transaction_state)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__transaction_state,Some(6imgxizAQWWJMS87zfbMiA),HashMap(__transaction_state-42 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-7 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __transaction_state-13 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-0 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __transaction_state-37 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-6 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-32 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __transaction_state-18 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-40 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __transaction_state-31 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __transaction_state-45 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-15 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __transaction_state-12 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __transaction_state-46 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-48 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __transaction_state-49 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-28 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __transaction_state-2 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-20 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __transaction_state-24 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __transaction_state-3 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __transaction_state-21 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-29 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-39 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __transaction_state-38 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-14 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-10 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-44 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __transaction_state-9 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-22 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-43 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __transaction_state-4 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __transaction_state-30 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-33 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-25 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-17 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-23 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __transaction_state-47 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __transaction_state-26 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-36 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __transaction_state-5 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-8 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __transaction_state-16 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __transaction_state-11 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __transaction_state-19 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __transaction_state-27 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __transaction_state-41 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-1 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-34 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-35 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:47:29,345] INFO [Controller id=2] New partition creation callback for __transaction_state-42,__transaction_state-7,__transaction_state-13,__transaction_state-0,__transaction_state-37,__transaction_state-6,__transaction_state-32,__transaction_state-18,__transaction_state-40,__transaction_state-31,__transaction_state-45,__transaction_state-15,__transaction_state-12,__transaction_state-46,__transaction_state-48,__transaction_state-49,__transaction_state-28,__transaction_state-2,__transaction_state-20,__transaction_state-24,__transaction_state-3,__transaction_state-21,__transaction_state-29,__transaction_state-39,__transaction_state-38,__transaction_state-14,__transaction_state-10,__transaction_state-44,__transaction_state-9,__transaction_state-22,__transaction_state-43,__transaction_state-4,__transaction_state-30,__transaction_state-33,__transaction_state-25,__transaction_state-17,__transaction_state-23,__transaction_state-47,__transaction_state-26,__transaction_state-36,__transaction_state-5,__transaction_state-8,__transaction_state-16,__transaction_state-11,__transaction_state-19,__transaction_state-27,__transaction_state-41,__transaction_state-1,__transaction_state-34,__transaction_state-35 (kafka.controller.KafkaController)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,345] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,346] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,347] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,349] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,349] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,349] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,350] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,351] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,352] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,353] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,354] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,355] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,355] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,355] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,422] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,423] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:47:29,424] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:47:29,425] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:47:29,426] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 12 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:47:29,426] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:47:29,427] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:47:29,427] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 2 with 12 become-leader and 26 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:47:29,428] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:47:29,429] INFO [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 for 38 partitions (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 13 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,429] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,430] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:47:29,431] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:47:29,431] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 13 become-leader and 24 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,432] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 50 partitions (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,434] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,435] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,436] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,437] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,438] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:47:29,447] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:47:29,449] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__transaction_state-31, __transaction_state-15, __transaction_state-7, __transaction_state-3, __transaction_state-39, __transaction_state-43, __transaction_state-11, __transaction_state-35, __transaction_state-23, __transaction_state-47, __transaction_state-19, __transaction_state-27) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,449] INFO [Broker id=2] Stopped fetchers as part of LeaderAndIsr request correlationId 6 from controller 2 epoch 1 as part of the become-leader transition for 12 partitions (state.change.logger)
[2022-10-04 16:47:29,454] INFO [LogLoader partition=__transaction_state-7, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,455] INFO Created log for partition __transaction_state-7 in /var/lib/kafka/data/__transaction_state-7 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,456] INFO [Partition __transaction_state-7 broker=2] No checkpointed highwatermark is found for partition __transaction_state-7 (kafka.cluster.Partition)
[2022-10-04 16:47:29,456] INFO [Partition __transaction_state-7 broker=2] Log loaded for partition __transaction_state-7 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,457] INFO [Broker id=2] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,465] INFO [LogLoader partition=__transaction_state-39, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,466] INFO Created log for partition __transaction_state-39 in /var/lib/kafka/data/__transaction_state-39 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,466] INFO [Partition __transaction_state-39 broker=2] No checkpointed highwatermark is found for partition __transaction_state-39 (kafka.cluster.Partition)
[2022-10-04 16:47:29,466] INFO [Partition __transaction_state-39 broker=2] Log loaded for partition __transaction_state-39 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,466] INFO [Broker id=2] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,469] INFO [LogLoader partition=__transaction_state-3, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,470] INFO Created log for partition __transaction_state-3 in /var/lib/kafka/data/__transaction_state-3 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,470] INFO [Partition __transaction_state-3 broker=2] No checkpointed highwatermark is found for partition __transaction_state-3 (kafka.cluster.Partition)
[2022-10-04 16:47:29,470] INFO [Partition __transaction_state-3 broker=2] Log loaded for partition __transaction_state-3 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,470] INFO [Broker id=2] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,474] INFO [LogLoader partition=__transaction_state-35, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,474] INFO Created log for partition __transaction_state-35 in /var/lib/kafka/data/__transaction_state-35 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,475] INFO [Partition __transaction_state-35 broker=2] No checkpointed highwatermark is found for partition __transaction_state-35 (kafka.cluster.Partition)
[2022-10-04 16:47:29,475] INFO [Partition __transaction_state-35 broker=2] Log loaded for partition __transaction_state-35 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,475] INFO [Broker id=2] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,478] INFO [LogLoader partition=__transaction_state-15, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,479] INFO Created log for partition __transaction_state-15 in /var/lib/kafka/data/__transaction_state-15 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,479] INFO [Partition __transaction_state-15 broker=2] No checkpointed highwatermark is found for partition __transaction_state-15 (kafka.cluster.Partition)
[2022-10-04 16:47:29,479] INFO [Partition __transaction_state-15 broker=2] Log loaded for partition __transaction_state-15 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,479] INFO [Broker id=2] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,483] INFO [LogLoader partition=__transaction_state-47, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,483] INFO Created log for partition __transaction_state-47 in /var/lib/kafka/data/__transaction_state-47 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,483] INFO [Partition __transaction_state-47 broker=2] No checkpointed highwatermark is found for partition __transaction_state-47 (kafka.cluster.Partition)
[2022-10-04 16:47:29,483] INFO [Partition __transaction_state-47 broker=2] Log loaded for partition __transaction_state-47 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,483] INFO [Broker id=2] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,487] INFO [LogLoader partition=__transaction_state-11, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,488] INFO Created log for partition __transaction_state-11 in /var/lib/kafka/data/__transaction_state-11 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,488] INFO [Partition __transaction_state-11 broker=2] No checkpointed highwatermark is found for partition __transaction_state-11 (kafka.cluster.Partition)
[2022-10-04 16:47:29,488] INFO [Partition __transaction_state-11 broker=2] Log loaded for partition __transaction_state-11 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,488] INFO [Broker id=2] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,492] INFO [LogLoader partition=__transaction_state-43, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,493] INFO Created log for partition __transaction_state-43 in /var/lib/kafka/data/__transaction_state-43 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,493] INFO [Partition __transaction_state-43 broker=2] No checkpointed highwatermark is found for partition __transaction_state-43 (kafka.cluster.Partition)
[2022-10-04 16:47:29,493] INFO [Partition __transaction_state-43 broker=2] Log loaded for partition __transaction_state-43 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,493] INFO [Broker id=2] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,496] INFO [LogLoader partition=__transaction_state-23, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,497] INFO Created log for partition __transaction_state-23 in /var/lib/kafka/data/__transaction_state-23 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,497] INFO [Partition __transaction_state-23 broker=2] No checkpointed highwatermark is found for partition __transaction_state-23 (kafka.cluster.Partition)
[2022-10-04 16:47:29,497] INFO [Partition __transaction_state-23 broker=2] Log loaded for partition __transaction_state-23 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,497] INFO [Broker id=2] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,500] INFO [LogLoader partition=__transaction_state-19, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,501] INFO Created log for partition __transaction_state-19 in /var/lib/kafka/data/__transaction_state-19 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,501] INFO [Partition __transaction_state-19 broker=2] No checkpointed highwatermark is found for partition __transaction_state-19 (kafka.cluster.Partition)
[2022-10-04 16:47:29,501] INFO [Partition __transaction_state-19 broker=2] Log loaded for partition __transaction_state-19 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,501] INFO [Broker id=2] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,505] INFO [LogLoader partition=__transaction_state-31, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,505] INFO Created log for partition __transaction_state-31 in /var/lib/kafka/data/__transaction_state-31 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,505] INFO [Partition __transaction_state-31 broker=2] No checkpointed highwatermark is found for partition __transaction_state-31 (kafka.cluster.Partition)
[2022-10-04 16:47:29,506] INFO [Partition __transaction_state-31 broker=2] Log loaded for partition __transaction_state-31 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,506] INFO [Broker id=2] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,509] INFO [LogLoader partition=__transaction_state-27, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,509] INFO Created log for partition __transaction_state-27 in /var/lib/kafka/data/__transaction_state-27 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,510] INFO [Partition __transaction_state-27 broker=2] No checkpointed highwatermark is found for partition __transaction_state-27 (kafka.cluster.Partition)
[2022-10-04 16:47:29,510] INFO [Partition __transaction_state-27 broker=2] Log loaded for partition __transaction_state-27 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,510] INFO [Broker id=2] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-22 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-37 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-18 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-33 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-0 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-30 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-45 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-4 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-34 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-49 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-16 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-46 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-12 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-42 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-24 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-1 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-13 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-28 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-9 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-40 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-6 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-21 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-36 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-48 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-10 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,512] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-25 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,515] INFO [LogLoader partition=__transaction_state-22, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,516] INFO Created log for partition __transaction_state-22 in /var/lib/kafka/data/__transaction_state-22 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,516] INFO [Partition __transaction_state-22 broker=2] No checkpointed highwatermark is found for partition __transaction_state-22 (kafka.cluster.Partition)
[2022-10-04 16:47:29,516] INFO [Partition __transaction_state-22 broker=2] Log loaded for partition __transaction_state-22 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,516] INFO [Broker id=2] Follower __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,519] INFO [LogLoader partition=__transaction_state-37, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,520] INFO Created log for partition __transaction_state-37 in /var/lib/kafka/data/__transaction_state-37 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,520] INFO [Partition __transaction_state-37 broker=2] No checkpointed highwatermark is found for partition __transaction_state-37 (kafka.cluster.Partition)
[2022-10-04 16:47:29,520] INFO [Partition __transaction_state-37 broker=2] Log loaded for partition __transaction_state-37 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,520] INFO [Broker id=2] Follower __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,522] INFO [LogLoader partition=__transaction_state-18, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,523] INFO Created log for partition __transaction_state-18 in /var/lib/kafka/data/__transaction_state-18 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,523] INFO [Partition __transaction_state-18 broker=2] No checkpointed highwatermark is found for partition __transaction_state-18 (kafka.cluster.Partition)
[2022-10-04 16:47:29,523] INFO [Partition __transaction_state-18 broker=2] Log loaded for partition __transaction_state-18 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,523] INFO [Broker id=2] Follower __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,526] INFO [LogLoader partition=__transaction_state-33, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,527] INFO Created log for partition __transaction_state-33 in /var/lib/kafka/data/__transaction_state-33 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,527] INFO [Partition __transaction_state-33 broker=2] No checkpointed highwatermark is found for partition __transaction_state-33 (kafka.cluster.Partition)
[2022-10-04 16:47:29,527] INFO [Partition __transaction_state-33 broker=2] Log loaded for partition __transaction_state-33 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,527] INFO [Broker id=2] Follower __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,530] INFO [LogLoader partition=__transaction_state-0, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,531] INFO Created log for partition __transaction_state-0 in /var/lib/kafka/data/__transaction_state-0 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,531] INFO [Partition __transaction_state-0 broker=2] No checkpointed highwatermark is found for partition __transaction_state-0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,531] INFO [Partition __transaction_state-0 broker=2] Log loaded for partition __transaction_state-0 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,531] INFO [Broker id=2] Follower __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,534] INFO [LogLoader partition=__transaction_state-30, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,535] INFO Created log for partition __transaction_state-30 in /var/lib/kafka/data/__transaction_state-30 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,535] INFO [Partition __transaction_state-30 broker=2] No checkpointed highwatermark is found for partition __transaction_state-30 (kafka.cluster.Partition)
[2022-10-04 16:47:29,535] INFO [Partition __transaction_state-30 broker=2] Log loaded for partition __transaction_state-30 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,535] INFO [Broker id=2] Follower __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,538] INFO [LogLoader partition=__transaction_state-45, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,539] INFO Created log for partition __transaction_state-45 in /var/lib/kafka/data/__transaction_state-45 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,539] INFO [Partition __transaction_state-45 broker=2] No checkpointed highwatermark is found for partition __transaction_state-45 (kafka.cluster.Partition)
[2022-10-04 16:47:29,539] INFO [Partition __transaction_state-45 broker=2] Log loaded for partition __transaction_state-45 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,539] INFO [Broker id=2] Follower __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,542] INFO [LogLoader partition=__transaction_state-4, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,543] INFO Created log for partition __transaction_state-4 in /var/lib/kafka/data/__transaction_state-4 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,543] INFO [Partition __transaction_state-4 broker=2] No checkpointed highwatermark is found for partition __transaction_state-4 (kafka.cluster.Partition)
[2022-10-04 16:47:29,543] INFO [Partition __transaction_state-4 broker=2] Log loaded for partition __transaction_state-4 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,543] INFO [Broker id=2] Follower __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,546] INFO [LogLoader partition=__transaction_state-34, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,547] INFO Created log for partition __transaction_state-34 in /var/lib/kafka/data/__transaction_state-34 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,547] INFO [Partition __transaction_state-34 broker=2] No checkpointed highwatermark is found for partition __transaction_state-34 (kafka.cluster.Partition)
[2022-10-04 16:47:29,547] INFO [Partition __transaction_state-34 broker=2] Log loaded for partition __transaction_state-34 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,547] INFO [Broker id=2] Follower __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,550] INFO [LogLoader partition=__transaction_state-49, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,550] INFO Created log for partition __transaction_state-49 in /var/lib/kafka/data/__transaction_state-49 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,550] INFO [Partition __transaction_state-49 broker=2] No checkpointed highwatermark is found for partition __transaction_state-49 (kafka.cluster.Partition)
[2022-10-04 16:47:29,550] INFO [Partition __transaction_state-49 broker=2] Log loaded for partition __transaction_state-49 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,551] INFO [Broker id=2] Follower __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,553] INFO [LogLoader partition=__transaction_state-16, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,554] INFO Created log for partition __transaction_state-16 in /var/lib/kafka/data/__transaction_state-16 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,554] INFO [Partition __transaction_state-16 broker=2] No checkpointed highwatermark is found for partition __transaction_state-16 (kafka.cluster.Partition)
[2022-10-04 16:47:29,554] INFO [Partition __transaction_state-16 broker=2] Log loaded for partition __transaction_state-16 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,554] INFO [Broker id=2] Follower __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,557] INFO [LogLoader partition=__transaction_state-46, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,558] INFO Created log for partition __transaction_state-46 in /var/lib/kafka/data/__transaction_state-46 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,558] INFO [Partition __transaction_state-46 broker=2] No checkpointed highwatermark is found for partition __transaction_state-46 (kafka.cluster.Partition)
[2022-10-04 16:47:29,558] INFO [Partition __transaction_state-46 broker=2] Log loaded for partition __transaction_state-46 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,558] INFO [Broker id=2] Follower __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,561] INFO [LogLoader partition=__transaction_state-12, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,562] INFO Created log for partition __transaction_state-12 in /var/lib/kafka/data/__transaction_state-12 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,562] INFO [Partition __transaction_state-12 broker=2] No checkpointed highwatermark is found for partition __transaction_state-12 (kafka.cluster.Partition)
[2022-10-04 16:47:29,562] INFO [Partition __transaction_state-12 broker=2] Log loaded for partition __transaction_state-12 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,562] INFO [Broker id=2] Follower __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,565] INFO [LogLoader partition=__transaction_state-42, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,566] INFO Created log for partition __transaction_state-42 in /var/lib/kafka/data/__transaction_state-42 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,566] INFO [Partition __transaction_state-42 broker=2] No checkpointed highwatermark is found for partition __transaction_state-42 (kafka.cluster.Partition)
[2022-10-04 16:47:29,566] INFO [Partition __transaction_state-42 broker=2] Log loaded for partition __transaction_state-42 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,566] INFO [Broker id=2] Follower __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,570] INFO [LogLoader partition=__transaction_state-24, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,570] INFO Created log for partition __transaction_state-24 in /var/lib/kafka/data/__transaction_state-24 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,570] INFO [Partition __transaction_state-24 broker=2] No checkpointed highwatermark is found for partition __transaction_state-24 (kafka.cluster.Partition)
[2022-10-04 16:47:29,570] INFO [Partition __transaction_state-24 broker=2] Log loaded for partition __transaction_state-24 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,570] INFO [Broker id=2] Follower __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,573] INFO [LogLoader partition=__transaction_state-1, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,574] INFO Created log for partition __transaction_state-1 in /var/lib/kafka/data/__transaction_state-1 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,574] INFO [Partition __transaction_state-1 broker=2] No checkpointed highwatermark is found for partition __transaction_state-1 (kafka.cluster.Partition)
[2022-10-04 16:47:29,574] INFO [Partition __transaction_state-1 broker=2] Log loaded for partition __transaction_state-1 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,574] INFO [Broker id=2] Follower __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,576] INFO [LogLoader partition=__transaction_state-13, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,577] INFO Created log for partition __transaction_state-13 in /var/lib/kafka/data/__transaction_state-13 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,577] INFO [Partition __transaction_state-13 broker=2] No checkpointed highwatermark is found for partition __transaction_state-13 (kafka.cluster.Partition)
[2022-10-04 16:47:29,577] INFO [Partition __transaction_state-13 broker=2] Log loaded for partition __transaction_state-13 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,577] INFO [Broker id=2] Follower __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,579] INFO [LogLoader partition=__transaction_state-28, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,580] INFO Created log for partition __transaction_state-28 in /var/lib/kafka/data/__transaction_state-28 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,580] INFO [Partition __transaction_state-28 broker=2] No checkpointed highwatermark is found for partition __transaction_state-28 (kafka.cluster.Partition)
[2022-10-04 16:47:29,580] INFO [Partition __transaction_state-28 broker=2] Log loaded for partition __transaction_state-28 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,580] INFO [Broker id=2] Follower __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,582] INFO [LogLoader partition=__transaction_state-9, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,583] INFO Created log for partition __transaction_state-9 in /var/lib/kafka/data/__transaction_state-9 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,583] INFO [Partition __transaction_state-9 broker=2] No checkpointed highwatermark is found for partition __transaction_state-9 (kafka.cluster.Partition)
[2022-10-04 16:47:29,583] INFO [Partition __transaction_state-9 broker=2] Log loaded for partition __transaction_state-9 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,583] INFO [Broker id=2] Follower __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,587] INFO [LogLoader partition=__transaction_state-40, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,587] INFO Created log for partition __transaction_state-40 in /var/lib/kafka/data/__transaction_state-40 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,587] INFO [Partition __transaction_state-40 broker=2] No checkpointed highwatermark is found for partition __transaction_state-40 (kafka.cluster.Partition)
[2022-10-04 16:47:29,587] INFO [Partition __transaction_state-40 broker=2] Log loaded for partition __transaction_state-40 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,587] INFO [Broker id=2] Follower __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,590] INFO [LogLoader partition=__transaction_state-6, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,591] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=6imgxizAQWWJMS87zfbMiA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 4 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:29,591] INFO Created log for partition __transaction_state-6 in /var/lib/kafka/data/__transaction_state-6 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,591] INFO [Partition __transaction_state-6 broker=2] No checkpointed highwatermark is found for partition __transaction_state-6 (kafka.cluster.Partition)
[2022-10-04 16:47:29,591] INFO [Partition __transaction_state-6 broker=2] Log loaded for partition __transaction_state-6 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,591] INFO [Broker id=2] Follower __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,592] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=6imgxizAQWWJMS87zfbMiA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 3 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:29,595] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 5 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:29,595] INFO [LogLoader partition=__transaction_state-21, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,596] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 4 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:29,596] INFO Created log for partition __transaction_state-21 in /var/lib/kafka/data/__transaction_state-21 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,596] INFO [Partition __transaction_state-21 broker=2] No checkpointed highwatermark is found for partition __transaction_state-21 (kafka.cluster.Partition)
[2022-10-04 16:47:29,596] INFO [Partition __transaction_state-21 broker=2] Log loaded for partition __transaction_state-21 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,596] INFO [Broker id=2] Follower __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,601] INFO [LogLoader partition=__transaction_state-36, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,602] INFO Created log for partition __transaction_state-36 in /var/lib/kafka/data/__transaction_state-36 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,602] INFO [Partition __transaction_state-36 broker=2] No checkpointed highwatermark is found for partition __transaction_state-36 (kafka.cluster.Partition)
[2022-10-04 16:47:29,602] INFO [Partition __transaction_state-36 broker=2] Log loaded for partition __transaction_state-36 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,602] INFO [Broker id=2] Follower __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,607] INFO [LogLoader partition=__transaction_state-48, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,608] INFO Created log for partition __transaction_state-48 in /var/lib/kafka/data/__transaction_state-48 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,608] INFO [Partition __transaction_state-48 broker=2] No checkpointed highwatermark is found for partition __transaction_state-48 (kafka.cluster.Partition)
[2022-10-04 16:47:29,608] INFO [Partition __transaction_state-48 broker=2] Log loaded for partition __transaction_state-48 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,608] INFO [Broker id=2] Follower __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,612] INFO [LogLoader partition=__transaction_state-10, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,612] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=6imgxizAQWWJMS87zfbMiA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 5 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:29,613] INFO Created log for partition __transaction_state-10 in /var/lib/kafka/data/__transaction_state-10 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,613] INFO [Partition __transaction_state-10 broker=2] No checkpointed highwatermark is found for partition __transaction_state-10 (kafka.cluster.Partition)
[2022-10-04 16:47:29,613] INFO [Partition __transaction_state-10 broker=2] Log loaded for partition __transaction_state-10 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,613] INFO [Broker id=2] Follower __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,616] INFO [LogLoader partition=__transaction_state-25, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,617] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 6 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:29,617] INFO Created log for partition __transaction_state-25 in /var/lib/kafka/data/__transaction_state-25 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:47:29,617] INFO [Partition __transaction_state-25 broker=2] No checkpointed highwatermark is found for partition __transaction_state-25 (kafka.cluster.Partition)
[2022-10-04 16:47:29,617] INFO [Partition __transaction_state-25 broker=2] Log loaded for partition __transaction_state-25 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,617] INFO [Broker id=2] Follower __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,617] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__transaction_state-42, __transaction_state-13, __transaction_state-46, __transaction_state-48, __transaction_state-34, __transaction_state-36, __transaction_state-40, __transaction_state-9, __transaction_state-28, __transaction_state-30, __transaction_state-1, __transaction_state-18, __transaction_state-22, __transaction_state-24, __transaction_state-10, __transaction_state-12, __transaction_state-45, __transaction_state-16, __transaction_state-49, __transaction_state-4, __transaction_state-37, __transaction_state-6, __transaction_state-0, __transaction_state-33, __transaction_state-21, __transaction_state-25) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,617] INFO [Broker id=2] Stopped fetchers as part of become-follower request from controller 2 epoch 1 with correlation id 6 for 26 partitions (state.change.logger)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-13 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 4 for partitions HashMap(__transaction_state-45 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-49 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-13 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-37 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-21 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-9 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-33 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-25 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __transaction_state-1 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,622] INFO [UnifiedLog partition=__transaction_state-13, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-45 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,622] INFO [UnifiedLog partition=__transaction_state-45, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 1 for partitions HashMap(__transaction_state-42 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-46 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-6 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-10 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-18 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-34 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-22 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __transaction_state-30 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,622] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-33 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-33, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-49 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-49, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-1 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-1, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-21 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-21, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-37 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-37, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-9 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-9, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,623] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-25 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,623] INFO [UnifiedLog partition=__transaction_state-25, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-12 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] INFO [UnifiedLog partition=__transaction_state-12, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 3 for partitions HashMap(__transaction_state-12 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-48 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-0 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-4 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-36 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-16 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-40 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-28 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __transaction_state-24 -> InitialFetchState(Some(6imgxizAQWWJMS87zfbMiA),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-28 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] INFO [UnifiedLog partition=__transaction_state-28, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-22 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-16 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-37 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-18 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [UnifiedLog partition=__transaction_state-16, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-33 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-0 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-30 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-45 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-48 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-4 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-34 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [UnifiedLog partition=__transaction_state-48, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-49 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-16 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-0 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-46 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-12 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,625] INFO [UnifiedLog partition=__transaction_state-0, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,625] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-42 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-24 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-1 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-4 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-13 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-28 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [UnifiedLog partition=__transaction_state-4, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-9 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-40 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-6 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-36 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-21 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [UnifiedLog partition=__transaction_state-36, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-36 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-24 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-48 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-10 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [UnifiedLog partition=__transaction_state-24, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,626] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-25 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,626] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-40 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,626] INFO [UnifiedLog partition=__transaction_state-40, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,627] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 7 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 39 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 3 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 35 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 15 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 47 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 11 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 43 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 23 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 19 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-7 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 31 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,633] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 27 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,634] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 22 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,634] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-22 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 37 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-37 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 18 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-18 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 33 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-33 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 0 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-0 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 30 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-30 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 45 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-45 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 4 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-4 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 34 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-34 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 49 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-49 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 16 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-16 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 46 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-46 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 12 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-12 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 42 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-42 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 24 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-24 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 1 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-1 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 13 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-13 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 28 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-28 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 9 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-9 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 40 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-40 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 6 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-6 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 21 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-21 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 36 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-36 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 48 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-48 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 10 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-10 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,635] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 25 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:47:29,635] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-25 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,636] INFO [Broker id=2] Finished LeaderAndIsr request in 207ms correlationId 6 from controller 2 for 38 partitions (state.change.logger)
[2022-10-04 16:47:29,637] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=6imgxizAQWWJMS87zfbMiA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 6 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:29,638] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-7 in 6 milliseconds, of which 2 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,638] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-42 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,638] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-13 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-46 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-17 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-34 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-5 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-38 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-9 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-26 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-30 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-1 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-18 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-22 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __transaction_state-12 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-45 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __transaction_state-16 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-49 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __transaction_state-4 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-37 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __transaction_state-8 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-41 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-29 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __transaction_state-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-33 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-21 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-25 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __transaction_state-11 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __transaction_state-44 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __transaction_state-15 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __transaction_state-48 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __transaction_state-3 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __transaction_state-36 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __transaction_state-7 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __transaction_state-40 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __transaction_state-28 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __transaction_state-32 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __transaction_state-20 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __transaction_state-24 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-10 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __transaction_state-43 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-14 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __transaction_state-47 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-2 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __transaction_state-35 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-6 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __transaction_state-39 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __transaction_state-27 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __transaction_state-31 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __transaction_state-19 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __transaction_state-23 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,639] INFO [Broker id=2] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:47:29,640] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 7 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:29,641] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-7 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,641] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-39 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,643] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-39 in 10 milliseconds, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,643] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-39 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,643] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-3 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,645] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-3 in 12 milliseconds, of which 10 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,645] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-3 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,645] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-35 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,647] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-35 in 14 milliseconds, of which 12 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,647] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-35 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,647] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-15 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,648] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-15 in 15 milliseconds, of which 14 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,648] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-15 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,648] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-47 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,650] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-47 in 17 milliseconds, of which 15 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,650] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-47 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,650] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-11 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,651] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-11 in 18 milliseconds, of which 17 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,651] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-11 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,652] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-43 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,653] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-43 in 20 milliseconds, of which 19 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,653] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-43 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,653] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-23 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,654] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-23 in 21 milliseconds, of which 20 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,654] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-23 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,654] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-19 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,656] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-19 in 23 milliseconds, of which 21 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,656] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-19 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,656] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-31 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,657] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-31 in 24 milliseconds, of which 23 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,657] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-31 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,657] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-27 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,658] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-27 in 25 milliseconds, of which 24 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,658] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-27 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:47:29,768] DEBUG [Controller id=2] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2022-10-04 16:47:29,771] INFO [Controller id=2] Acquired new producerId block ProducerIdsBlock{brokerId=3, producerIdStart=0, producerIdLen=1000} by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-10 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-10, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-42 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-42, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-30 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-30, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-46 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-46, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-18 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-18, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-34 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-34, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-6 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-6, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,781] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-22 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:29,781] INFO [UnifiedLog partition=__transaction_state-22, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:29,846] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(NuuWTLIyRhyaR1CKjIS-IQ),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=3,2,4, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=3,4,1, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2,1,3, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2,4,1, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:47:29,846] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,847] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 2,3,4 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 3,2,4 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 3,4,1 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 3,1,2 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 2,1,3 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 2,4,1 (state.change.logger)
[2022-10-04 16:47:29,854] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,855] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,856] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:47:29,857] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,897] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:47:29,898] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:47:29,899] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 12 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:47:29,899] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:47:29,899] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 2 with 13 become-leader and 24 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:47:29,900] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:47:29,900] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 13 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:47:29,901] INFO [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 for 37 partitions (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:47:29,901] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,902] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 12 become-leader and 26 become-follower partitions (state.change.logger)
[2022-10-04 16:47:29,902] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:47:29,903] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 50 partitions (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,904] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,905] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:47:29,906] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:47:29,911] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:47:29,912] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__consumer_offsets-36, __consumer_offsets-24, __consumer_offsets-48, __consumer_offsets-12, __consumer_offsets-8, __consumer_offsets-4, __consumer_offsets-16, __consumer_offsets-28, __consumer_offsets-20, __consumer_offsets-0, __consumer_offsets-44, __consumer_offsets-32, __consumer_offsets-40) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:29,912] INFO [Broker id=2] Stopped fetchers as part of LeaderAndIsr request correlationId 8 from controller 2 epoch 1 as part of the become-leader transition for 13 partitions (state.change.logger)
[2022-10-04 16:47:29,915] INFO [LogLoader partition=__consumer_offsets-20, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,915] INFO Created log for partition __consumer_offsets-20 in /var/lib/kafka/data/__consumer_offsets-20 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,916] INFO [Partition __consumer_offsets-20 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-20 (kafka.cluster.Partition)
[2022-10-04 16:47:29,916] INFO [Partition __consumer_offsets-20 broker=2] Log loaded for partition __consumer_offsets-20 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,916] INFO [Broker id=2] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,919] INFO [LogLoader partition=__consumer_offsets-24, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,919] INFO Created log for partition __consumer_offsets-24 in /var/lib/kafka/data/__consumer_offsets-24 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,919] INFO [Partition __consumer_offsets-24 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-24 (kafka.cluster.Partition)
[2022-10-04 16:47:29,919] INFO [Partition __consumer_offsets-24 broker=2] Log loaded for partition __consumer_offsets-24 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,919] INFO [Broker id=2] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,922] INFO [LogLoader partition=__consumer_offsets-12, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,923] INFO Created log for partition __consumer_offsets-12 in /var/lib/kafka/data/__consumer_offsets-12 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,923] INFO [Partition __consumer_offsets-12 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-12 (kafka.cluster.Partition)
[2022-10-04 16:47:29,923] INFO [Partition __consumer_offsets-12 broker=2] Log loaded for partition __consumer_offsets-12 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,923] INFO [Broker id=2] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,926] INFO [LogLoader partition=__consumer_offsets-44, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,927] INFO Created log for partition __consumer_offsets-44 in /var/lib/kafka/data/__consumer_offsets-44 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,927] INFO [Partition __consumer_offsets-44 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-44 (kafka.cluster.Partition)
[2022-10-04 16:47:29,927] INFO [Partition __consumer_offsets-44 broker=2] Log loaded for partition __consumer_offsets-44 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,927] INFO [Broker id=2] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,930] INFO [LogLoader partition=__consumer_offsets-48, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,930] INFO Created log for partition __consumer_offsets-48 in /var/lib/kafka/data/__consumer_offsets-48 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,930] INFO [Partition __consumer_offsets-48 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-48 (kafka.cluster.Partition)
[2022-10-04 16:47:29,930] INFO [Partition __consumer_offsets-48 broker=2] Log loaded for partition __consumer_offsets-48 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,931] INFO [Broker id=2] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,934] INFO [LogLoader partition=__consumer_offsets-16, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,934] INFO Created log for partition __consumer_offsets-16 in /var/lib/kafka/data/__consumer_offsets-16 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,934] INFO [Partition __consumer_offsets-16 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-16 (kafka.cluster.Partition)
[2022-10-04 16:47:29,934] INFO [Partition __consumer_offsets-16 broker=2] Log loaded for partition __consumer_offsets-16 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,934] INFO [Broker id=2] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,937] INFO [LogLoader partition=__consumer_offsets-4, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,938] INFO Created log for partition __consumer_offsets-4 in /var/lib/kafka/data/__consumer_offsets-4 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,938] INFO [Partition __consumer_offsets-4 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-4 (kafka.cluster.Partition)
[2022-10-04 16:47:29,938] INFO [Partition __consumer_offsets-4 broker=2] Log loaded for partition __consumer_offsets-4 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,938] INFO [Broker id=2] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,941] INFO [LogLoader partition=__consumer_offsets-36, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,941] INFO Created log for partition __consumer_offsets-36 in /var/lib/kafka/data/__consumer_offsets-36 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,942] INFO [Partition __consumer_offsets-36 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-36 (kafka.cluster.Partition)
[2022-10-04 16:47:29,942] INFO [Partition __consumer_offsets-36 broker=2] Log loaded for partition __consumer_offsets-36 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,942] INFO [Broker id=2] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,944] INFO [LogLoader partition=__consumer_offsets-8, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,945] INFO Created log for partition __consumer_offsets-8 in /var/lib/kafka/data/__consumer_offsets-8 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,945] INFO [Partition __consumer_offsets-8 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-8 (kafka.cluster.Partition)
[2022-10-04 16:47:29,945] INFO [Partition __consumer_offsets-8 broker=2] Log loaded for partition __consumer_offsets-8 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,945] INFO [Broker id=2] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,948] INFO [LogLoader partition=__consumer_offsets-40, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,949] INFO Created log for partition __consumer_offsets-40 in /var/lib/kafka/data/__consumer_offsets-40 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,949] INFO [Partition __consumer_offsets-40 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-40 (kafka.cluster.Partition)
[2022-10-04 16:47:29,949] INFO [Partition __consumer_offsets-40 broker=2] Log loaded for partition __consumer_offsets-40 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,949] INFO [Broker id=2] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,952] INFO [LogLoader partition=__consumer_offsets-28, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,953] INFO Created log for partition __consumer_offsets-28 in /var/lib/kafka/data/__consumer_offsets-28 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,953] INFO [Partition __consumer_offsets-28 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-28 (kafka.cluster.Partition)
[2022-10-04 16:47:29,953] INFO [Partition __consumer_offsets-28 broker=2] Log loaded for partition __consumer_offsets-28 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,953] INFO [Broker id=2] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,956] INFO [LogLoader partition=__consumer_offsets-0, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,956] INFO Created log for partition __consumer_offsets-0 in /var/lib/kafka/data/__consumer_offsets-0 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,956] INFO [Partition __consumer_offsets-0 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,956] INFO [Partition __consumer_offsets-0 broker=2] Log loaded for partition __consumer_offsets-0 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,956] INFO [Broker id=2] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,960] INFO [LogLoader partition=__consumer_offsets-32, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,960] INFO Created log for partition __consumer_offsets-32 in /var/lib/kafka/data/__consumer_offsets-32 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,960] INFO [Partition __consumer_offsets-32 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-32 (kafka.cluster.Partition)
[2022-10-04 16:47:29,960] INFO [Partition __consumer_offsets-32 broker=2] Log loaded for partition __consumer_offsets-32 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,960] INFO [Broker id=2] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-3 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-18 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-41 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-29 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-14 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-33 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-23 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-38 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-11 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-26 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-45 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-15 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-30 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-35 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-5 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-39 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-9 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-27 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-42 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-2 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-21 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-6 with leader 4 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-47 with leader 1 (state.change.logger)
[2022-10-04 16:47:29,961] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-17 with leader 3 (state.change.logger)
[2022-10-04 16:47:29,963] INFO [LogLoader partition=__consumer_offsets-3, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,964] INFO Created log for partition __consumer_offsets-3 in /var/lib/kafka/data/__consumer_offsets-3 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,964] INFO [Partition __consumer_offsets-3 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-3 (kafka.cluster.Partition)
[2022-10-04 16:47:29,964] INFO [Partition __consumer_offsets-3 broker=2] Log loaded for partition __consumer_offsets-3 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,964] INFO [Broker id=2] Follower __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,966] INFO [LogLoader partition=__consumer_offsets-18, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,967] INFO Created log for partition __consumer_offsets-18 in /var/lib/kafka/data/__consumer_offsets-18 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,967] INFO [Partition __consumer_offsets-18 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-18 (kafka.cluster.Partition)
[2022-10-04 16:47:29,967] INFO [Partition __consumer_offsets-18 broker=2] Log loaded for partition __consumer_offsets-18 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,967] INFO [Broker id=2] Follower __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,969] INFO [LogLoader partition=__consumer_offsets-41, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,970] INFO Created log for partition __consumer_offsets-41 in /var/lib/kafka/data/__consumer_offsets-41 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,970] INFO [Partition __consumer_offsets-41 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-41 (kafka.cluster.Partition)
[2022-10-04 16:47:29,970] INFO [Partition __consumer_offsets-41 broker=2] Log loaded for partition __consumer_offsets-41 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,970] INFO [Broker id=2] Follower __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,972] INFO [LogLoader partition=__consumer_offsets-29, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,973] INFO Created log for partition __consumer_offsets-29 in /var/lib/kafka/data/__consumer_offsets-29 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,973] INFO [Partition __consumer_offsets-29 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-29 (kafka.cluster.Partition)
[2022-10-04 16:47:29,973] INFO [Partition __consumer_offsets-29 broker=2] Log loaded for partition __consumer_offsets-29 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,973] INFO [Broker id=2] Follower __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,975] INFO [LogLoader partition=__consumer_offsets-14, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,976] INFO Created log for partition __consumer_offsets-14 in /var/lib/kafka/data/__consumer_offsets-14 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,976] INFO [Partition __consumer_offsets-14 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-14 (kafka.cluster.Partition)
[2022-10-04 16:47:29,976] INFO [Partition __consumer_offsets-14 broker=2] Log loaded for partition __consumer_offsets-14 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,976] INFO [Broker id=2] Follower __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,978] INFO [LogLoader partition=__consumer_offsets-33, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,979] INFO Created log for partition __consumer_offsets-33 in /var/lib/kafka/data/__consumer_offsets-33 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,979] INFO [Partition __consumer_offsets-33 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-33 (kafka.cluster.Partition)
[2022-10-04 16:47:29,979] INFO [Partition __consumer_offsets-33 broker=2] Log loaded for partition __consumer_offsets-33 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,979] INFO [Broker id=2] Follower __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,981] INFO [LogLoader partition=__consumer_offsets-23, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,982] INFO Created log for partition __consumer_offsets-23 in /var/lib/kafka/data/__consumer_offsets-23 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,982] INFO [Partition __consumer_offsets-23 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-23 (kafka.cluster.Partition)
[2022-10-04 16:47:29,982] INFO [Partition __consumer_offsets-23 broker=2] Log loaded for partition __consumer_offsets-23 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,982] INFO [Broker id=2] Follower __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,984] INFO [LogLoader partition=__consumer_offsets-38, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,985] INFO Created log for partition __consumer_offsets-38 in /var/lib/kafka/data/__consumer_offsets-38 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,985] INFO [Partition __consumer_offsets-38 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-38 (kafka.cluster.Partition)
[2022-10-04 16:47:29,985] INFO [Partition __consumer_offsets-38 broker=2] Log loaded for partition __consumer_offsets-38 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,985] INFO [Broker id=2] Follower __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,987] INFO [LogLoader partition=__consumer_offsets-11, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,988] INFO Created log for partition __consumer_offsets-11 in /var/lib/kafka/data/__consumer_offsets-11 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,988] INFO [Partition __consumer_offsets-11 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-11 (kafka.cluster.Partition)
[2022-10-04 16:47:29,988] INFO [Partition __consumer_offsets-11 broker=2] Log loaded for partition __consumer_offsets-11 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,988] INFO [Broker id=2] Follower __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,990] INFO [LogLoader partition=__consumer_offsets-26, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,991] INFO Created log for partition __consumer_offsets-26 in /var/lib/kafka/data/__consumer_offsets-26 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,991] INFO [Partition __consumer_offsets-26 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-26 (kafka.cluster.Partition)
[2022-10-04 16:47:29,991] INFO [Partition __consumer_offsets-26 broker=2] Log loaded for partition __consumer_offsets-26 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,991] INFO [Broker id=2] Follower __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,993] INFO [LogLoader partition=__consumer_offsets-45, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,994] INFO Created log for partition __consumer_offsets-45 in /var/lib/kafka/data/__consumer_offsets-45 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,994] INFO [Partition __consumer_offsets-45 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-45 (kafka.cluster.Partition)
[2022-10-04 16:47:29,994] INFO [Partition __consumer_offsets-45 broker=2] Log loaded for partition __consumer_offsets-45 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,994] INFO [Broker id=2] Follower __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,996] INFO [LogLoader partition=__consumer_offsets-15, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,997] INFO Created log for partition __consumer_offsets-15 in /var/lib/kafka/data/__consumer_offsets-15 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,997] INFO [Partition __consumer_offsets-15 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-15 (kafka.cluster.Partition)
[2022-10-04 16:47:29,997] INFO [Partition __consumer_offsets-15 broker=2] Log loaded for partition __consumer_offsets-15 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,997] INFO [Broker id=2] Follower __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:29,999] INFO [LogLoader partition=__consumer_offsets-30, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:29,999] INFO Created log for partition __consumer_offsets-30 in /var/lib/kafka/data/__consumer_offsets-30 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:29,999] INFO [Partition __consumer_offsets-30 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-30 (kafka.cluster.Partition)
[2022-10-04 16:47:29,999] INFO [Partition __consumer_offsets-30 broker=2] Log loaded for partition __consumer_offsets-30 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:29,999] INFO [Broker id=2] Follower __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,001] INFO [LogLoader partition=__consumer_offsets-35, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,002] INFO Created log for partition __consumer_offsets-35 in /var/lib/kafka/data/__consumer_offsets-35 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,002] INFO [Partition __consumer_offsets-35 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-35 (kafka.cluster.Partition)
[2022-10-04 16:47:30,002] INFO [Partition __consumer_offsets-35 broker=2] Log loaded for partition __consumer_offsets-35 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,002] INFO [Broker id=2] Follower __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,004] INFO [LogLoader partition=__consumer_offsets-5, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,005] INFO Created log for partition __consumer_offsets-5 in /var/lib/kafka/data/__consumer_offsets-5 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,005] INFO [Partition __consumer_offsets-5 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-5 (kafka.cluster.Partition)
[2022-10-04 16:47:30,005] INFO [Partition __consumer_offsets-5 broker=2] Log loaded for partition __consumer_offsets-5 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,005] INFO [Broker id=2] Follower __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,007] INFO [LogLoader partition=__consumer_offsets-39, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,008] INFO Created log for partition __consumer_offsets-39 in /var/lib/kafka/data/__consumer_offsets-39 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,008] INFO [Partition __consumer_offsets-39 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-39 (kafka.cluster.Partition)
[2022-10-04 16:47:30,008] INFO [Partition __consumer_offsets-39 broker=2] Log loaded for partition __consumer_offsets-39 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,008] INFO [Broker id=2] Follower __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,010] INFO [LogLoader partition=__consumer_offsets-9, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,010] INFO Created log for partition __consumer_offsets-9 in /var/lib/kafka/data/__consumer_offsets-9 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,010] INFO [Partition __consumer_offsets-9 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-9 (kafka.cluster.Partition)
[2022-10-04 16:47:30,011] INFO [Partition __consumer_offsets-9 broker=2] Log loaded for partition __consumer_offsets-9 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,011] INFO [Broker id=2] Follower __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,013] INFO [LogLoader partition=__consumer_offsets-27, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,013] INFO Created log for partition __consumer_offsets-27 in /var/lib/kafka/data/__consumer_offsets-27 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,013] INFO [Partition __consumer_offsets-27 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-27 (kafka.cluster.Partition)
[2022-10-04 16:47:30,013] INFO [Partition __consumer_offsets-27 broker=2] Log loaded for partition __consumer_offsets-27 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,013] INFO [Broker id=2] Follower __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,015] INFO [LogLoader partition=__consumer_offsets-42, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,016] INFO Created log for partition __consumer_offsets-42 in /var/lib/kafka/data/__consumer_offsets-42 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,016] INFO [Partition __consumer_offsets-42 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-42 (kafka.cluster.Partition)
[2022-10-04 16:47:30,016] INFO [Partition __consumer_offsets-42 broker=2] Log loaded for partition __consumer_offsets-42 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,016] INFO [Broker id=2] Follower __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,019] INFO [LogLoader partition=__consumer_offsets-2, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,020] INFO Created log for partition __consumer_offsets-2 in /var/lib/kafka/data/__consumer_offsets-2 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,020] INFO [Partition __consumer_offsets-2 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-2 (kafka.cluster.Partition)
[2022-10-04 16:47:30,020] INFO [Partition __consumer_offsets-2 broker=2] Log loaded for partition __consumer_offsets-2 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,020] INFO [Broker id=2] Follower __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,022] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=NuuWTLIyRhyaR1CKjIS-IQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 5 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:30,023] INFO [LogLoader partition=__consumer_offsets-21, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,023] INFO Created log for partition __consumer_offsets-21 in /var/lib/kafka/data/__consumer_offsets-21 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,023] INFO [Partition __consumer_offsets-21 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-21 (kafka.cluster.Partition)
[2022-10-04 16:47:30,023] INFO [Partition __consumer_offsets-21 broker=2] Log loaded for partition __consumer_offsets-21 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,023] INFO [Broker id=2] Follower __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,025] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 6 sent to broker 172.99.0.5:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:47:30,027] INFO [LogLoader partition=__consumer_offsets-6, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,027] INFO Created log for partition __consumer_offsets-6 in /var/lib/kafka/data/__consumer_offsets-6 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,027] INFO [Partition __consumer_offsets-6 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-6 (kafka.cluster.Partition)
[2022-10-04 16:47:30,027] INFO [Partition __consumer_offsets-6 broker=2] Log loaded for partition __consumer_offsets-6 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,027] INFO [Broker id=2] Follower __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,029] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=NuuWTLIyRhyaR1CKjIS-IQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 7 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:30,030] INFO [LogLoader partition=__consumer_offsets-47, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,031] INFO Created log for partition __consumer_offsets-47 in /var/lib/kafka/data/__consumer_offsets-47 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,031] INFO [Partition __consumer_offsets-47 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-47 (kafka.cluster.Partition)
[2022-10-04 16:47:30,031] INFO [Partition __consumer_offsets-47 broker=2] Log loaded for partition __consumer_offsets-47 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,031] INFO [Broker id=2] Follower __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,031] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 8 sent to broker 172.99.0.6:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:47:30,033] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=NuuWTLIyRhyaR1CKjIS-IQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 6 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:30,034] INFO [LogLoader partition=__consumer_offsets-17, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:47:30,035] INFO Created log for partition __consumer_offsets-17 in /var/lib/kafka/data/__consumer_offsets-17 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:47:30,035] INFO [Partition __consumer_offsets-17 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-17 (kafka.cluster.Partition)
[2022-10-04 16:47:30,035] INFO [Partition __consumer_offsets-17 broker=2] Log loaded for partition __consumer_offsets-17 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:47:30,035] INFO [Broker id=2] Follower __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:47:30,035] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__consumer_offsets-15, __consumer_offsets-11, __consumer_offsets-9, __consumer_offsets-42, __consumer_offsets-23, __consumer_offsets-21, __consumer_offsets-17, __consumer_offsets-30, __consumer_offsets-26, __consumer_offsets-5, __consumer_offsets-38, __consumer_offsets-3, __consumer_offsets-47, __consumer_offsets-45, __consumer_offsets-14, __consumer_offsets-41, __consumer_offsets-18, __consumer_offsets-29, __consumer_offsets-27, __consumer_offsets-39, __consumer_offsets-6, __consumer_offsets-35, __consumer_offsets-33, __consumer_offsets-2) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:30,035] INFO [Broker id=2] Stopped fetchers as part of become-follower request from controller 2 epoch 1 with correlation id 8 for 24 partitions (state.change.logger)
[2022-10-04 16:47:30,036] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 7 sent to broker 172.99.0.3:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:47:30,037] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 4 for partitions HashMap(__consumer_offsets-30 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-38 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-26 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-42 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-18 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-2 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-6 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0), __consumer_offsets-14 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=4, host=172.99.0.6:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:30,037] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 1 for partitions HashMap(__consumer_offsets-27 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-35 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-23 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-47 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-3 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-15 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-11 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0), __consumer_offsets-39 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=1, host=172.99.0.3:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:30,038] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 3 for partitions HashMap(__consumer_offsets-21 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-9 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-17 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-29 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-41 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-33 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-45 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0), __consumer_offsets-5 -> InitialFetchState(Some(NuuWTLIyRhyaR1CKjIS-IQ),BrokerEndPoint(id=3, host=172.99.0.5:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-3 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-18 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-41 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-29 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-14 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-33 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-23 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-38 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-11 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-26 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-45 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-15 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-30 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-35 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-5 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-39 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-9 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-27 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-42 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-2 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-21 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-6 with leader 4 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-47 with leader 1 (state.change.logger)
[2022-10-04 16:47:30,038] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-17 with leader 3 (state.change.logger)
[2022-10-04 16:47:30,039] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 20 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,040] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-20 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 24 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-24 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 12 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-12 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 44 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-44 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 48 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-48 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 16 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-16 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 4 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-4 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 36 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-36 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 8 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-8 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 40 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-40 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 28 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-28 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 0 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-0 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,042] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 32 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,042] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-32 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,043] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 3 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,043] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-3 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,043] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 18 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,043] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-18 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 41 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-41 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 29 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-29 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 14 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-14 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 33 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-33 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 23 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-23 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 38 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-38 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 11 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-11 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 26 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-26 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 45 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-45 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 15 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-15 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 30 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-30 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 35 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-35 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 5 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-5 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 39 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-39 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 9 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-9 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 27 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-27 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 42 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-42 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 2 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-2 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 21 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-21 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 6 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-6 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 47 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-47 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,044] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 17 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,044] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-17 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,045] INFO [Broker id=2] Finished LeaderAndIsr request in 143ms correlationId 8 from controller 2 for 37 partitions (state.change.logger)
[2022-10-04 16:47:30,045] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=NuuWTLIyRhyaR1CKjIS-IQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 8 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-20 in 6 milliseconds for epoch 0, of which 3 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-24 in 5 milliseconds for epoch 0, of which 5 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-12 in 5 milliseconds for epoch 0, of which 5 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-44 in 5 milliseconds for epoch 0, of which 5 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-48 in 5 milliseconds for epoch 0, of which 5 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-16 in 5 milliseconds for epoch 0, of which 5 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,047] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-13 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-46 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __consumer_offsets-9 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-42 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __consumer_offsets-21 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-17 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-30 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-26 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-5 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-38 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-1 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-34 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-16 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __consumer_offsets-45 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-12 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-41 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-24 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __consumer_offsets-20 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-49 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 2], zkVersion=0, replicas=[3, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-29 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-25 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __consumer_offsets-8 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 1], zkVersion=0, replicas=[3, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-37 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-4 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 4], zkVersion=0, replicas=[3, 2, 4], offlineReplicas=[]) for partition __consumer_offsets-33 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-15 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-48 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-11 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,048] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __consumer_offsets-44 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-23 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-19 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 3], zkVersion=0, replicas=[2, 1, 3], offlineReplicas=[]) for partition __consumer_offsets-32 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-28 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-7 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 1], zkVersion=0, replicas=[2, 4, 1], offlineReplicas=[]) for partition __consumer_offsets-40 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-3 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 4], zkVersion=0, replicas=[2, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-36 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-47 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-14 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-43 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-10 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-22 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-18 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-31 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-27 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-39 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-6 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-35 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-2 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] INFO [Broker id=2] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:47:30,049] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-4 in 7 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,049] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 9 sent to broker 172.99.0.4:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:47:30,049] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-36 in 7 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,050] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-8 in 8 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,050] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-40 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,050] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-28 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,050] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-0 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,050] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-32 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-3 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-18 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-41 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-29 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-14 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-33 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-23 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-38 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-11 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-26 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-45 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-15 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-30 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-35 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-5 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-39 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,052] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-9 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-27 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-42 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-2 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-21 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-6 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-47 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,053] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-17 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:30,064] INFO [GroupCoordinator 2]: Dynamic member with unknown member id joins group bench in Empty state. Created a new member id consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 and request the member to rejoin with this id. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,074] INFO [GroupCoordinator 2]: Preparing to rebalance group bench in state PreparingRebalance with old generation 0 (__consumer_offsets-32) (reason: Adding new member consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 with group instance id None) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-30 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-30, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-14 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-14, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-42 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-42, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-26 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-26, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-38 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-38, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-6 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-6, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-18 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-18, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,152] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-2 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,152] INFO [UnifiedLog partition=__consumer_offsets-2, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,286] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-15 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,286] INFO [UnifiedLog partition=__consumer_offsets-15, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,286] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-47 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,286] INFO [UnifiedLog partition=__consumer_offsets-47, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,286] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-27 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,286] INFO [UnifiedLog partition=__consumer_offsets-27, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,286] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-11 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,286] INFO [UnifiedLog partition=__consumer_offsets-11, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,286] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-39 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,286] INFO [UnifiedLog partition=__consumer_offsets-39, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,287] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-23 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,287] INFO [UnifiedLog partition=__consumer_offsets-23, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,287] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-35 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,287] INFO [UnifiedLog partition=__consumer_offsets-35, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,287] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-3 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,287] INFO [UnifiedLog partition=__consumer_offsets-3, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,307] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-29 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,307] INFO [UnifiedLog partition=__consumer_offsets-29, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,307] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-45 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-45, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-41 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-41, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-9 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-9, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-21 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-21, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-5 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-5, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-33 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-33, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:30,308] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-17 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:47:30,308] INFO [UnifiedLog partition=__consumer_offsets-17, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:47:33,082] INFO [GroupCoordinator 2]: Stabilized group bench generation 1 (__consumer_offsets-32) with 1 members (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:33,093] INFO [GroupCoordinator 2]: Assignment received from leader consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 for group bench for generation 1. The group has 1 members, 0 of which are static. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:47:38,242] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,352] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,570] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,680] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,791] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:38,900] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,010] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,122] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,231] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,341] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,452] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,670] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,780] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:39,891] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,000] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,110] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,221] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,331] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,441] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,551] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,659] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,769] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,880] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:40,989] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,100] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,211] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,320] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,431] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,540] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,651] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,758] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,869] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:41,980] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,090] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,200] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,421] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,530] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,640] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,751] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,859] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:42,969] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,079] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,137] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,189] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,300] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,410] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,521] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,629] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,740] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,850] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:43,958] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,068] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,179] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,289] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,400] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,509] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,619] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,730] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,839] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:44,950] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,057] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,168] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,279] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,389] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,499] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,609] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,719] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,831] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:45,940] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,050] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,484] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,595] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,703] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,809] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:46,920] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,029] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,358] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,468] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,579] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,689] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,799] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:47,910] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,020] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,130] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,137] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,673] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,889] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:48,999] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,109] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,219] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,329] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,439] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,549] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,658] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,768] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,874] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:49,984] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,094] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,204] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,535] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,644] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,752] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,863] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:50,969] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,078] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,189] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,294] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,404] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,509] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,619] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,725] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,835] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:51,944] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,052] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,163] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,268] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,374] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,484] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,594] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,704] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,814] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:52,919] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,028] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,134] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,349] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,567] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,673] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,889] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:53,999] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,104] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,533] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,644] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,857] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:54,963] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,068] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,174] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,283] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,389] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,604] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,709] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,819] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:55,929] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,149] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,257] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,473] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,578] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,798] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:56,908] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,014] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,120] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,229] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,339] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,444] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,552] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,663] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,773] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:57,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,414] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:58,952] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,068] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,177] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,285] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,394] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,503] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,718] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,824] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:47:59,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,149] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,258] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,473] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,578] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,684] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:00,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,009] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,118] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,224] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,334] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,444] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,553] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,662] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,768] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,873] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:01,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,298] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:02,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,057] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,163] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,268] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,378] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,483] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,588] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,698] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,803] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:03,909] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,128] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,234] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,344] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,452] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,568] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,783] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,888] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:04,998] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,103] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,529] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,638] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,743] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,849] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:05,957] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,063] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,168] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,278] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,383] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,488] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,703] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,809] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:06,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,128] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,234] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,343] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,448] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,557] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,662] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,770] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:07,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,628] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:08,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,057] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,162] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,268] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,377] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,482] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,588] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,693] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:09,908] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,013] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,119] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,228] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,333] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,439] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,548] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,657] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,762] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,867] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:10,978] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,082] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,188] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,293] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,399] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,614] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,718] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:11,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,038] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,252] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,362] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,573] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,678] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,787] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,893] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:12,999] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,137] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,323] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,428] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,538] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,643] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,748] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,857] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:13,962] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,067] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,173] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,277] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,383] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,488] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,803] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:14,908] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,234] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,339] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,448] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,552] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,662] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,767] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,873] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:15,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,087] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,298] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:16,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,252] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,888] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:17,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,103] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,313] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,848] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:18,957] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,062] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,167] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,272] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,378] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,698] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,807] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:19,912] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,233] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,338] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,444] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,552] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,662] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,768] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,872] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:20,978] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,083] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,198] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,302] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:21,943] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,152] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,261] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,472] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,578] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,792] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:22,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,002] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,107] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,848] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:23,952] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,167] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,272] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,378] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,698] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,803] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:24,912] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,232] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,338] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,443] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,548] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,656] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,762] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,866] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:25,972] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,077] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,182] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,287] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,392] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,497] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,707] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,812] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:26,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,132] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,238] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,343] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,451] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,562] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,667] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,772] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,877] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:27,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,087] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,192] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,297] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,829] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:28,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,676] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:29,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,096] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:30,938] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,151] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,257] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:31,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:32,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:33,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:34,938] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,147] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,251] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,357] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,567] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:35,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:36,938] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,362] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,571] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:37,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:38,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,676] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:39,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:40,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,255] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,676] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:41,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:42,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,251] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:43,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,207] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,312] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,632] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,737] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:44,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,056] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,162] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,267] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,371] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,582] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,792] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:45,897] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,002] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,107] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,212] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,422] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,632] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,737] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:46,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,056] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,161] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,266] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,582] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,792] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:47,897] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,002] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,107] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,212] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,317] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,422] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,527] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,632] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,737] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:48,947] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,051] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,156] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,262] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,366] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,471] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,576] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,682] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,787] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,891] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:49,997] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,207] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,522] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,837] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:50,942] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,047] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,155] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,261] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,366] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,472] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,576] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,681] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,786] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,892] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:51,997] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,101] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,207] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,312] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,732] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,837] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:52,943] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,156] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,261] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,471] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,577] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,682] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,787] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,892] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:53,996] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,207] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,312] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,522] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,732] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:54,943] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,047] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,151] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,571] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:55,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:56,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,147] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,256] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:57,994] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,207] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,522] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,732] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,837] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:58,942] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,151] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,257] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:48:59,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:00,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,255] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:01,991] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,306] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:02,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,147] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,255] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,571] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,676] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:03,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,202] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,307] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,411] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,727] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:04,936] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,147] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,251] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,356] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:05,987] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,092] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:06,932] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,671] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:07,986] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,092] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,302] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,827] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:08,932] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:09,986] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,091] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,302] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,827] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:10,931] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:11,987] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,092] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,302] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:12,932] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,671] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:13,987] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,092] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,301] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,827] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:14,932] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,456] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,561] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,667] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,771] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,876] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:15,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,087] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,192] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,296] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,402] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,507] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,612] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,717] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,821] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:16,927] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,032] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,242] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,451] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,556] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,661] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,766] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,872] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:17,977] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,081] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,186] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,292] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,397] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,502] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,607] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,712] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,817] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:18,922] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,028] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,132] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,237] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,342] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,447] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,555] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,661] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,766] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,871] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:19,976] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,081] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,187] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,292] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,397] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,501] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,607] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,712] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,817] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:20,923] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,027] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,132] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,237] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,342] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,447] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,551] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,656] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,761] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,865] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:21,971] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,076] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,182] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,287] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,392] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,496] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,601] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,707] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,812] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:22,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,022] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,127] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,232] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,337] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,442] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,547] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,651] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,756] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,862] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:23,966] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,071] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,176] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,282] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,387] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,491] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,597] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,807] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:24,911] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,016] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,122] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,332] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,436] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,542] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,647] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,751] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,856] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:25,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,277] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,591] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:26,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,116] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:27,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:28,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:29,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,277] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,801] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:30,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,223] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:31,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:32,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,328] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:33,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:34,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,011] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:35,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,172] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,801] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:36,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,326] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:37,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,801] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:38,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:39,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,172] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,592] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,696] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:40,907] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,537] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,753] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,861] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:41,966] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,072] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,176] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,281] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,386] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,492] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,597] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,701] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,807] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:42,912] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,017] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,122] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,332] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,437] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,543] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,647] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,856] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:43,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,591] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,696] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,801] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:44,907] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,012] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,117] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,536] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,851] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:45,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,796] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:46,902] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,006] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,112] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,428] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,532] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,637] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:47,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,797] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:48,901] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,006] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,112] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,426] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,532] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,637] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:49,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,272] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,692] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,797] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:50,901] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,007] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,112] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,321] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,426] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,532] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,637] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:51,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,797] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:52,901] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,006] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,111] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,426] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,531] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,637] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:53,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,797] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:54,902] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,006] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,111] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,216] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,536] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,641] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,851] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:55,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,060] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,482] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,796] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:56,902] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,007] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,111] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,216] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,427] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,532] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,636] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:57,951] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,056] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,160] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,266] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,371] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,476] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,581] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,686] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,791] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:58,896] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,001] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,107] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,211] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,316] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,422] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,527] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,632] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,736] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,842] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:49:59,947] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,051] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,155] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,261] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,366] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,471] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,577] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,681] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,786] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,891] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:00,997] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,206] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,312] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,524] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,731] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,836] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:01,942] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,047] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,155] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,260] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,366] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,471] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,576] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,681] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,786] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,891] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:02,997] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,206] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,417] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,522] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,626] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,731] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,837] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:03,942] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,047] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,155] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,261] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,366] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,471] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,575] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,680] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,786] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,891] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:04,996] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,206] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,416] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,522] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,731] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,836] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:05,942] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,047] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,150] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,255] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,361] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,676] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,886] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:06,991] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,201] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,306] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,412] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,517] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,622] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,726] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,832] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:07,937] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,042] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,147] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,250] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,356] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,670] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:08,986] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,091] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,196] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,301] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,407] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,721] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,826] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:09,932] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,670] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:10,986] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,091] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,196] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,301] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,406] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,722] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,826] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:11,931] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,461] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,566] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,671] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,776] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:12,986] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,091] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,196] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,301] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,406] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,512] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,617] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,721] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,826] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:13,931] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,037] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,142] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,247] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,456] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,561] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,666] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,771] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,876] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:14,981] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,087] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,192] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,296] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,401] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,506] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,612] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,717] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,821] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:15,926] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,032] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,137] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,242] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,450] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,556] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,661] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,765] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,871] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:16,976] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,081] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,186] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,291] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,396] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,501] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,607] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,712] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,816] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:17,921] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,027] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,132] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,237] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,342] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,446] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,550] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,656] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,761] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,865] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:18,971] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,076] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,181] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,286] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,391] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,496] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,601] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,707] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,812] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:19,916] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,022] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,127] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,232] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,337] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,442] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,547] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,651] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,756] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,860] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:20,966] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,071] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,176] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,281] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,386] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,491] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,597] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,807] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:21,911] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,016] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,122] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,332] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,436] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,542] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,647] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,751] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:22,960] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,066] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,382] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,488] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,596] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,701] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,807] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:23,912] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,016] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,121] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,332] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,437] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,541] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,646] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,856] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:24,960] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,065] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,171] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,276] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,381] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,486] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,591] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,696] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:25,907] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,011] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,116] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,222] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,327] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,536] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,642] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,747] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,851] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:26,956] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,060] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,166] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,376] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,482] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,691] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,796] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:27,902] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,007] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,111] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,140] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,217] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,427] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,532] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,637] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,742] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,847] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:28,950] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:29,056] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:29,161] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:29,266] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:29,371] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:29,476] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:33,141] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:34,808] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:50:34,814] INFO [GroupCoordinator 2]: Preparing to rebalance group bench in state PreparingRebalance with old generation 1 (__consumer_offsets-32) (reason: Removing member consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4 on LeaveGroup) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:50:34,814] INFO [GroupCoordinator 2]: Group bench with generation 2 is now empty (__consumer_offsets-32) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:50:34,816] INFO [GroupCoordinator 2]: Member MemberMetadata(memberId=consumer-bench-1-71aee0f1-4d81-4186-a46e-ba2c992d49a4, groupInstanceId=None, clientId=consumer-bench-1, clientHost=/172.99.0.17, sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, supportedProtocols=List(range, cooperative-sticky)) has left group bench through explicit `LeaveGroup` request (kafka.coordinator.group.GroupCoordinator)
