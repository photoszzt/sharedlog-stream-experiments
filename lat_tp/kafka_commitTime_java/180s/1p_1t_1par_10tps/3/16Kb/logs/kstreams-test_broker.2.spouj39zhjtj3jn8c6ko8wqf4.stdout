===> User
uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)
===> Configuring ...
===> Running preflight checks ... 
===> Check if /var/lib/kafka/data is writable ...
===> Check if Zookeeper is healthy ...
0 [main] DEBUG io.confluent.admin.utils.cli.ZookeeperReadyCommand  - Arguments Namespace(zookeeper_connect=zookeeper:2181, timeout=40000). 
2 [main] DEBUG io.confluent.admin.utils.ClusterStatus  - Check if Zookeeper is ready: zookeeper:2181 
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:host.name=broker-2
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.version=11.0.14.1
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.vendor=Azul Systems, Inc.
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.home=/usr/lib/jvm/zulu11-ca
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.class.path=/usr/share/java/cp-base-new/jackson-dataformat-csv-2.12.3.jar:/usr/share/java/cp-base-new/confluent-log4j-1.2.17-cp10.jar:/usr/share/java/cp-base-new/jackson-dataformat-yaml-2.12.3.jar:/usr/share/java/cp-base-new/jackson-annotations-2.12.3.jar:/usr/share/java/cp-base-new/lz4-java-1.8.0.jar:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar:/usr/share/java/cp-base-new/scala-reflect-2.13.5.jar:/usr/share/java/cp-base-new/disk-usage-agent-7.1.0.jar:/usr/share/java/cp-base-new/logredactor-1.0.10.jar:/usr/share/java/cp-base-new/utility-belt-7.1.0.jar:/usr/share/java/cp-base-new/commons-cli-1.4.jar:/usr/share/java/cp-base-new/kafka-storage-api-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jackson-module-scala_2.13-2.12.3.jar:/usr/share/java/cp-base-new/kafka-raft-7.1.0-ccs.jar:/usr/share/java/cp-base-new/common-utils-7.1.0.jar:/usr/share/java/cp-base-new/kafka-metadata-7.1.0-ccs.jar:/usr/share/java/cp-base-new/slf4j-api-1.7.30.jar:/usr/share/java/cp-base-new/logredactor-metrics-1.0.10.jar:/usr/share/java/cp-base-new/kafka-clients-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jolokia-core-1.6.2.jar:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar:/usr/share/java/cp-base-new/scala-java8-compat_2.13-1.0.0.jar:/usr/share/java/cp-base-new/zstd-jni-1.5.0-4.jar:/usr/share/java/cp-base-new/scala-library-2.13.5.jar:/usr/share/java/cp-base-new/gson-2.8.6.jar:/usr/share/java/cp-base-new/kafka-server-common-7.1.0-ccs.jar:/usr/share/java/cp-base-new/audience-annotations-0.5.0.jar:/usr/share/java/cp-base-new/paranamer-2.8.jar:/usr/share/java/cp-base-new/argparse4j-0.7.0.jar:/usr/share/java/cp-base-new/jackson-datatype-jdk8-2.12.3.jar:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar:/usr/share/java/cp-base-new/snappy-java-1.1.8.4.jar:/usr/share/java/cp-base-new/jopt-simple-5.0.4.jar:/usr/share/java/cp-base-new/json-simple-1.1.1.jar:/usr/share/java/cp-base-new/kafka_2.13-7.1.0-ccs.jar:/usr/share/java/cp-base-new/kafka-storage-7.1.0-ccs.jar:/usr/share/java/cp-base-new/jose4j-0.7.8.jar:/usr/share/java/cp-base-new/zookeeper-jute-3.6.3.jar:/usr/share/java/cp-base-new/zookeeper-3.6.3.jar:/usr/share/java/cp-base-new/jolokia-jvm-1.6.2-agent.jar:/usr/share/java/cp-base-new/jackson-core-2.12.3.jar:/usr/share/java/cp-base-new/jackson-databind-2.12.3.jar:/usr/share/java/cp-base-new/minimal-json-0.9.5.jar:/usr/share/java/cp-base-new/scala-collection-compat_2.13-2.4.4.jar:/usr/share/java/cp-base-new/scala-logging_2.13-3.9.3.jar:/usr/share/java/cp-base-new/snakeyaml-1.27.jar:/usr/share/java/cp-base-new/re2j-1.6.jar:/usr/share/java/cp-base-new/metrics-core-4.1.12.1.jar:/usr/share/java/cp-base-new/metrics-core-2.2.0.jar
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.io.tmpdir=/tmp
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:java.compiler=<NA>
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.name=Linux
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.arch=amd64
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.version=5.10.39-zjiabuild
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.name=appuser
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.home=/home/appuser
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:user.dir=/home/appuser
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.free=237MB
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.max=3886MB
15 [main] INFO org.apache.zookeeper.ZooKeeper  - Client environment:os.memory.total=244MB
17 [main] INFO org.apache.zookeeper.ZooKeeper  - Initiating client connection, connectString=zookeeper:2181 sessionTimeout=40000 watcher=io.confluent.admin.utils.ZookeeperConnectionWatcher@78ac1102
21 [main] INFO org.apache.zookeeper.common.X509Util  - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation
26 [main] INFO org.apache.zookeeper.ClientCnxnSocket  - jute.maxbuffer value is 1048575 Bytes
31 [main] INFO org.apache.zookeeper.ClientCnxn  - zookeeper.request.timeout value is 0. feature enabled=false
40 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.SaslServerPrincipal  - Canonicalized address to kstreams-test_zookeeper.1.x5tqo4hwlclsmpfomili4agyp.kstreams-test_default
41 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Opening socket connection to server zookeeper/172.99.0.12:2181.
42 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - SASL config status: Will not attempt to authenticate using SASL (unknown error)
48 [main-SendThread(zookeeper:2181)] WARN org.apache.zookeeper.ClientCnxn  - Session 0x0 for sever zookeeper/172.99.0.12:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)
50 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxnSocketNIO  - Ignoring exception during shutdown input
java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpen(SocketChannelImpl.java:160)
	at java.base/sun.nio.ch.SocketChannelImpl.shutdownInput(SocketChannelImpl.java:913)
	at java.base/sun.nio.ch.SocketAdaptor.shutdownInput(SocketAdaptor.java:398)
	at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:193)
	at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1390)
	at org.apache.zookeeper.ClientCnxn$SendThread.cleanAndNotifyState(ClientCnxn.java:1331)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1309)
50 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxnSocketNIO  - Ignoring exception during shutdown output
java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpen(SocketChannelImpl.java:160)
	at java.base/sun.nio.ch.SocketChannelImpl.shutdownOutput(SocketChannelImpl.java:930)
	at java.base/sun.nio.ch.SocketAdaptor.shutdownOutput(SocketAdaptor.java:406)
	at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:198)
	at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1390)
	at org.apache.zookeeper.ClientCnxn$SendThread.cleanAndNotifyState(ClientCnxn.java:1331)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1309)
1152 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.SaslServerPrincipal  - Canonicalized address to kstreams-test_zookeeper.1.x5tqo4hwlclsmpfomili4agyp.kstreams-test_default
1152 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Opening socket connection to server zookeeper/172.99.0.12:2181.
1152 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - SASL config status: Will not attempt to authenticate using SASL (unknown error)
1153 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Socket connection established, initiating session, client: /172.99.0.3:59208, server: zookeeper/172.99.0.12:2181
1155 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxn  - Session establishment request sent on zookeeper/172.99.0.12:2181
1217 [main-SendThread(zookeeper:2181)] INFO org.apache.zookeeper.ClientCnxn  - Session establishment complete on server zookeeper/172.99.0.12:2181, session id = 0x10000137e020000, negotiated timeout = 40000
1219 [main] DEBUG org.apache.zookeeper.ZooKeeper  - Closing session: 0x10000137e020000
1219 [main] DEBUG org.apache.zookeeper.ClientCnxn  - Closing client for session: 0x10000137e020000
1226 [main-SendThread(zookeeper:2181)] DEBUG org.apache.zookeeper.ClientCnxn  - Reading reply session id: 0x10000137e020000, packet:: clientPath:null serverPath:null finished:false header:: 1,-11  replyHeader:: 1,2,0  request:: null response:: null
1226 [main-SendThread(zookeeper:2181)] WARN org.apache.zookeeper.ClientCnxn  - An exception was thrown while closing send thread for session 0x10000137e020000.
EndOfStreamException: Unable to read additional data from server sessionid 0x10000137e020000, likely server has closed socket
	at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)
1227 [main] DEBUG org.apache.zookeeper.ClientCnxn  - Disconnecting client for session: 0x10000137e020000
1328 [main] INFO org.apache.zookeeper.ZooKeeper  - Session: 0x10000137e020000 closed
1328 [main-EventThread] INFO org.apache.zookeeper.ClientCnxn  - EventThread shut down for session: 0x10000137e020000
===> Launching ... 
===> Launching kafka ... 
[2022-10-04 16:51:42,948] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)
[2022-10-04 16:51:43,231] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)
[2022-10-04 16:51:43,303] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)
[2022-10-04 16:51:43,306] INFO starting (kafka.server.KafkaServer)
[2022-10-04 16:51:43,306] INFO Connecting to zookeeper on zookeeper:2181 (kafka.server.KafkaServer)
[2022-10-04 16:51:43,318] INFO [ZooKeeperClient Kafka server] Initializing a new session to zookeeper:2181. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:51:43,322] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:host.name=broker-2 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.version=11.0.14.1 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.class.path=/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/lz4-java-1.8.0.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/connect-json-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.73.Final.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/kafka-raft-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/logredactor-metrics-1.0.8.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.22.1.1.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jetty-server-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-streams-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.73.Final.jar:/usr/bin/../share/java/kafka/netty-tcnative-classes-2.0.46.Final.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/kafka-shell-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-4.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/connect-mirror-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/logredactor-1.0.8.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.73.Final.jar:/usr/bin/../share/java/kafka/netty-transport-classes-epoll-4.1.73.Final.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/trogdor-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp8.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/netty-common-4.1.73.Final.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.73.Final.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.4.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/kafka-tools-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/connect-runtime-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/kafka-storage-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.1.0-ccs.jar:/usr/bin/../share/java/kafka/jose4j-0.7.8.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/minimal-json-0.9.5.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.73.Final.jar:/usr/bin/../share/java/kafka/re2j-1.6.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.44.v20210927.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,322] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.version=5.10.39-zjiabuild (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:user.name=appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:user.home=/home/appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:user.dir=/home/appuser (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.memory.free=1008MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.memory.max=1024MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,323] INFO Client environment:os.memory.total=1024MB (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,326] INFO Initiating client connection, connectString=zookeeper:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@232a7d73 (org.apache.zookeeper.ZooKeeper)
[2022-10-04 16:51:43,330] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)
[2022-10-04 16:51:43,335] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:51:43,337] INFO [ZooKeeperClient Kafka server] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:51:43,343] INFO Opening socket connection to server zookeeper/172.99.0.12:2181. (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:51:43,343] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:51:43,347] INFO Socket connection established, initiating session, client: /172.99.0.3:59210, server: zookeeper/172.99.0.12:2181 (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:51:43,353] INFO Session establishment complete on server zookeeper/172.99.0.12:2181, session id = 0x10000137e020001, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)
[2022-10-04 16:51:43,355] INFO [ZooKeeperClient Kafka server] Connected. (kafka.zookeeper.ZooKeeperClient)
[2022-10-04 16:51:43,435] INFO [feature-zk-node-event-process-thread]: Starting (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)
[2022-10-04 16:51:43,446] INFO Feature ZK node at path: /feature does not exist (kafka.server.FinalizedFeatureChangeListener)
[2022-10-04 16:51:43,447] INFO Cleared cache (kafka.server.FinalizedFeatureCache)
[2022-10-04 16:51:43,612] INFO Cluster ID = V9y8_uPsSGGSh4yzKXDIzg (kafka.server.KafkaServer)
[2022-10-04 16:51:43,615] WARN No meta.properties file under dir /var/lib/kafka/data/meta.properties (kafka.server.BrokerMetadataCheckpoint)
[2022-10-04 16:51:43,646] INFO KafkaConfig values: 
	advertised.listeners = PLAINTEXT://172.99.0.3:9092
	alter.config.policy.class.name = null
	alter.log.dirs.replication.quota.window.num = 11
	alter.log.dirs.replication.quota.window.size.seconds = 1
	authorizer.class.name = 
	auto.create.topics.enable = false
	auto.leader.rebalance.enable = true
	background.threads = 10
	broker.heartbeat.interval.ms = 2000
	broker.id = 2
	broker.id.generation.enable = true
	broker.rack = null
	broker.session.timeout.ms = 9000
	client.quota.callback.class = null
	compression.type = producer
	connection.failed.authentication.delay.ms = 100
	connections.max.idle.ms = 600000
	connections.max.reauth.ms = 0
	control.plane.listener.name = null
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.listener.names = null
	controller.quorum.append.linger.ms = 25
	controller.quorum.election.backoff.max.ms = 1000
	controller.quorum.election.timeout.ms = 1000
	controller.quorum.fetch.timeout.ms = 2000
	controller.quorum.request.timeout.ms = 2000
	controller.quorum.retry.backoff.ms = 20
	controller.quorum.voters = []
	controller.quota.window.num = 11
	controller.quota.window.size.seconds = 1
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delegation.token.expiry.check.interval.ms = 3600000
	delegation.token.expiry.time.ms = 86400000
	delegation.token.master.key = null
	delegation.token.max.lifetime.ms = 604800000
	delegation.token.secret.key = null
	delete.records.purgatory.purge.interval.requests = 1
	delete.topic.enable = true
	fetch.max.bytes = 57671680
	fetch.purgatory.purge.interval.requests = 1000
	group.initial.rebalance.delay.ms = 3000
	group.max.session.timeout.ms = 1800000
	group.max.size = 2147483647
	group.min.session.timeout.ms = 6000
	initial.broker.registration.timeout.ms = 60000
	inter.broker.listener.name = null
	inter.broker.protocol.version = 3.1-IV0
	kafka.metrics.polling.interval.secs = 10
	kafka.metrics.reporters = []
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = PLAINTEXT:PLAINTEXT
	listeners = PLAINTEXT://0.0.0.0:9092
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.max.compaction.lag.ms = 9223372036854775807
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dirs = /var/lib/kafka/data
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.flush.start.offset.checkpoint.interval.ms = 60000
	log.index.interval.bytes = 4096
	log.index.size.max.bytes = 10485760
	log.message.downconversion.enable = true
	log.message.format.version = 3.0-IV1
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connection.creation.rate = 2147483647
	max.connections = 2147483647
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	max.incremental.fetch.session.cache.slots = 1000
	message.max.bytes = 1048588
	metadata.log.dir = null
	metadata.log.max.record.bytes.between.snapshots = 20971520
	metadata.log.segment.bytes = 1073741824
	metadata.log.segment.min.bytes = 8388608
	metadata.log.segment.ms = 604800000
	metadata.max.retention.bytes = -1
	metadata.max.retention.ms = 604800000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 3
	node.id = 2
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.alter.log.dirs.threads = null
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 10080
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 3
	offsets.topic.segment.bytes = 104857600
	password.encoder.cipher.algorithm = AES/CBC/PKCS5Padding
	password.encoder.iterations = 4096
	password.encoder.key.length = 128
	password.encoder.keyfactory.algorithm = null
	password.encoder.old.secret = null
	password.encoder.secret = null
	principal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder
	process.roles = []
	producer.purgatory.purge.interval.requests = 1000
	queued.max.request.bytes = -1
	queued.max.requests = 500
	quota.window.num = 11
	quota.window.size.seconds = 1
	remote.log.index.file.cache.total.size.bytes = 1073741824
	remote.log.manager.task.interval.ms = 30000
	remote.log.manager.task.retry.backoff.max.ms = 30000
	remote.log.manager.task.retry.backoff.ms = 500
	remote.log.manager.task.retry.jitter = 0.2
	remote.log.manager.thread.pool.size = 10
	remote.log.metadata.manager.class.name = null
	remote.log.metadata.manager.class.path = null
	remote.log.metadata.manager.impl.prefix = null
	remote.log.metadata.manager.listener.name = null
	remote.log.reader.max.pending.tasks = 100
	remote.log.reader.threads = 10
	remote.log.storage.manager.class.name = null
	remote.log.storage.manager.class.path = null
	remote.log.storage.manager.impl.prefix = null
	remote.log.storage.system.enable = false
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 30000
	replica.selector.class = null
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	sasl.client.callback.handler.class = null
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism.controller.protocol = GSSAPI
	sasl.mechanism.inter.broker.protocol = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	sasl.server.callback.handler.class = null
	security.inter.broker.protocol = PLAINTEXT
	security.providers = null
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.cipher.suites = []
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.principal.mapping.rules = DEFAULT
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.abort.timed.out.transaction.cleanup.interval.ms = 10000
	transaction.max.timeout.ms = 900000
	transaction.remove.expired.transaction.cleanup.interval.ms = 3600000
	transaction.state.log.load.buffer.size = 5242880
	transaction.state.log.min.isr = 2
	transaction.state.log.num.partitions = 50
	transaction.state.log.replication.factor = 3
	transaction.state.log.segment.bytes = 104857600
	transactional.id.expiration.ms = 604800000
	unclean.leader.election.enable = false
	zookeeper.clientCnxnSocket = null
	zookeeper.connect = zookeeper:2181
	zookeeper.connection.timeout.ms = null
	zookeeper.max.in.flight.requests = 10
	zookeeper.session.timeout.ms = 18000
	zookeeper.set.acl = false
	zookeeper.ssl.cipher.suites = null
	zookeeper.ssl.client.enable = false
	zookeeper.ssl.crl.enable = false
	zookeeper.ssl.enabled.protocols = null
	zookeeper.ssl.endpoint.identification.algorithm = HTTPS
	zookeeper.ssl.keystore.location = null
	zookeeper.ssl.keystore.password = null
	zookeeper.ssl.keystore.type = null
	zookeeper.ssl.ocsp.enable = false
	zookeeper.ssl.protocol = TLSv1.2
	zookeeper.ssl.truststore.location = null
	zookeeper.ssl.truststore.password = null
	zookeeper.ssl.truststore.type = null
	zookeeper.sync.time.ms = 2000
 (kafka.server.KafkaConfig)
[2022-10-04 16:51:43,651] INFO KafkaConfig values: 
	advertised.listeners = PLAINTEXT://172.99.0.3:9092
	alter.config.policy.class.name = null
	alter.log.dirs.replication.quota.window.num = 11
	alter.log.dirs.replication.quota.window.size.seconds = 1
	authorizer.class.name = 
	auto.create.topics.enable = false
	auto.leader.rebalance.enable = true
	background.threads = 10
	broker.heartbeat.interval.ms = 2000
	broker.id = 2
	broker.id.generation.enable = true
	broker.rack = null
	broker.session.timeout.ms = 9000
	client.quota.callback.class = null
	compression.type = producer
	connection.failed.authentication.delay.ms = 100
	connections.max.idle.ms = 600000
	connections.max.reauth.ms = 0
	control.plane.listener.name = null
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.listener.names = null
	controller.quorum.append.linger.ms = 25
	controller.quorum.election.backoff.max.ms = 1000
	controller.quorum.election.timeout.ms = 1000
	controller.quorum.fetch.timeout.ms = 2000
	controller.quorum.request.timeout.ms = 2000
	controller.quorum.retry.backoff.ms = 20
	controller.quorum.voters = []
	controller.quota.window.num = 11
	controller.quota.window.size.seconds = 1
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delegation.token.expiry.check.interval.ms = 3600000
	delegation.token.expiry.time.ms = 86400000
	delegation.token.master.key = null
	delegation.token.max.lifetime.ms = 604800000
	delegation.token.secret.key = null
	delete.records.purgatory.purge.interval.requests = 1
	delete.topic.enable = true
	fetch.max.bytes = 57671680
	fetch.purgatory.purge.interval.requests = 1000
	group.initial.rebalance.delay.ms = 3000
	group.max.session.timeout.ms = 1800000
	group.max.size = 2147483647
	group.min.session.timeout.ms = 6000
	initial.broker.registration.timeout.ms = 60000
	inter.broker.listener.name = null
	inter.broker.protocol.version = 3.1-IV0
	kafka.metrics.polling.interval.secs = 10
	kafka.metrics.reporters = []
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = PLAINTEXT:PLAINTEXT
	listeners = PLAINTEXT://0.0.0.0:9092
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.max.compaction.lag.ms = 9223372036854775807
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dirs = /var/lib/kafka/data
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.flush.start.offset.checkpoint.interval.ms = 60000
	log.index.interval.bytes = 4096
	log.index.size.max.bytes = 10485760
	log.message.downconversion.enable = true
	log.message.format.version = 3.0-IV1
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connection.creation.rate = 2147483647
	max.connections = 2147483647
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	max.incremental.fetch.session.cache.slots = 1000
	message.max.bytes = 1048588
	metadata.log.dir = null
	metadata.log.max.record.bytes.between.snapshots = 20971520
	metadata.log.segment.bytes = 1073741824
	metadata.log.segment.min.bytes = 8388608
	metadata.log.segment.ms = 604800000
	metadata.max.retention.bytes = -1
	metadata.max.retention.ms = 604800000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 3
	node.id = 2
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.alter.log.dirs.threads = null
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 10080
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 3
	offsets.topic.segment.bytes = 104857600
	password.encoder.cipher.algorithm = AES/CBC/PKCS5Padding
	password.encoder.iterations = 4096
	password.encoder.key.length = 128
	password.encoder.keyfactory.algorithm = null
	password.encoder.old.secret = null
	password.encoder.secret = null
	principal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder
	process.roles = []
	producer.purgatory.purge.interval.requests = 1000
	queued.max.request.bytes = -1
	queued.max.requests = 500
	quota.window.num = 11
	quota.window.size.seconds = 1
	remote.log.index.file.cache.total.size.bytes = 1073741824
	remote.log.manager.task.interval.ms = 30000
	remote.log.manager.task.retry.backoff.max.ms = 30000
	remote.log.manager.task.retry.backoff.ms = 500
	remote.log.manager.task.retry.jitter = 0.2
	remote.log.manager.thread.pool.size = 10
	remote.log.metadata.manager.class.name = null
	remote.log.metadata.manager.class.path = null
	remote.log.metadata.manager.impl.prefix = null
	remote.log.metadata.manager.listener.name = null
	remote.log.reader.max.pending.tasks = 100
	remote.log.reader.threads = 10
	remote.log.storage.manager.class.name = null
	remote.log.storage.manager.class.path = null
	remote.log.storage.manager.impl.prefix = null
	remote.log.storage.system.enable = false
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 30000
	replica.selector.class = null
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	sasl.client.callback.handler.class = null
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism.controller.protocol = GSSAPI
	sasl.mechanism.inter.broker.protocol = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	sasl.server.callback.handler.class = null
	security.inter.broker.protocol = PLAINTEXT
	security.providers = null
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.cipher.suites = []
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.principal.mapping.rules = DEFAULT
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.abort.timed.out.transaction.cleanup.interval.ms = 10000
	transaction.max.timeout.ms = 900000
	transaction.remove.expired.transaction.cleanup.interval.ms = 3600000
	transaction.state.log.load.buffer.size = 5242880
	transaction.state.log.min.isr = 2
	transaction.state.log.num.partitions = 50
	transaction.state.log.replication.factor = 3
	transaction.state.log.segment.bytes = 104857600
	transactional.id.expiration.ms = 604800000
	unclean.leader.election.enable = false
	zookeeper.clientCnxnSocket = null
	zookeeper.connect = zookeeper:2181
	zookeeper.connection.timeout.ms = null
	zookeeper.max.in.flight.requests = 10
	zookeeper.session.timeout.ms = 18000
	zookeeper.set.acl = false
	zookeeper.ssl.cipher.suites = null
	zookeeper.ssl.client.enable = false
	zookeeper.ssl.crl.enable = false
	zookeeper.ssl.enabled.protocols = null
	zookeeper.ssl.endpoint.identification.algorithm = HTTPS
	zookeeper.ssl.keystore.location = null
	zookeeper.ssl.keystore.password = null
	zookeeper.ssl.keystore.type = null
	zookeeper.ssl.ocsp.enable = false
	zookeeper.ssl.protocol = TLSv1.2
	zookeeper.ssl.truststore.location = null
	zookeeper.ssl.truststore.password = null
	zookeeper.ssl.truststore.type = null
	zookeeper.sync.time.ms = 2000
 (kafka.server.KafkaConfig)
[2022-10-04 16:51:43,681] INFO [ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:51:43,682] INFO [ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:51:43,683] INFO [ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:51:43,684] INFO [ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2022-10-04 16:51:43,715] INFO Loading logs from log dirs ArraySeq(/var/lib/kafka/data) (kafka.log.LogManager)
[2022-10-04 16:51:43,719] INFO Attempting recovery for all logs in /var/lib/kafka/data since no clean shutdown file was found (kafka.log.LogManager)
[2022-10-04 16:51:43,723] INFO Loaded 0 logs in 7ms. (kafka.log.LogManager)
[2022-10-04 16:51:43,723] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)
[2022-10-04 16:51:43,725] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)
[2022-10-04 16:51:43,735] INFO Starting the log cleaner (kafka.log.LogCleaner)
[2022-10-04 16:51:43,819] INFO [kafka-log-cleaner-thread-0]: Starting (kafka.log.LogCleaner)
[2022-10-04 16:51:44,047] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Starting (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:51:44,171] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)
[2022-10-04 16:51:44,174] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.Acceptor)
[2022-10-04 16:51:44,198] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Created data-plane acceptor and processors for endpoint : ListenerName(PLAINTEXT) (kafka.network.SocketServer)
[2022-10-04 16:51:44,204] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Starting (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:51:44,222] INFO [ExpirationReaper-2-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,223] INFO [ExpirationReaper-2-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,224] INFO [ExpirationReaper-2-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,225] INFO [ExpirationReaper-2-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,237] INFO [LogDirFailureHandler]: Starting (kafka.server.ReplicaManager$LogDirFailureHandler)
[2022-10-04 16:51:44,259] INFO Creating /brokers/ids/2 (is it secure? false) (kafka.zk.KafkaZkClient)
[2022-10-04 16:51:44,276] INFO Stat of the created znode at /brokers/ids/2 is: 27,27,1664902304270,1664902304270,1,0,0,72057677756366849,204,0,27
 (kafka.zk.KafkaZkClient)
[2022-10-04 16:51:44,276] INFO Registered broker 2 at path /brokers/ids/2 with addresses: PLAINTEXT://172.99.0.3:9092, czxid (broker epoch): 27 (kafka.zk.KafkaZkClient)
[2022-10-04 16:51:44,325] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-10-04 16:51:44,333] INFO [ExpirationReaper-2-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,338] INFO [ExpirationReaper-2-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,338] INFO Successfully created /controller_epoch with initial epoch 0 (kafka.zk.KafkaZkClient)
[2022-10-04 16:51:44,339] INFO [ExpirationReaper-2-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,344] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-10-04 16:51:44,347] INFO [Controller id=2] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-10-04 16:51:44,349] INFO Feature ZK node created at path: /feature (kafka.server.FinalizedFeatureChangeListener)
[2022-10-04 16:51:44,355] INFO [GroupCoordinator 2]: Starting up. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:51:44,359] INFO [GroupCoordinator 2]: Startup complete. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:51:44,374] INFO [TransactionCoordinator id=2] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:51:44,377] INFO [Transaction Marker Channel Manager 2]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)
[2022-10-04 16:51:44,378] INFO [TransactionCoordinator id=2] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:51:44,383] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2022-10-04 16:51:44,383] INFO Updated cache from existing <empty> to latest FinalizedFeaturesAndEpoch(features=Features{}, epoch=0). (kafka.server.FinalizedFeatureCache)
[2022-10-04 16:51:44,386] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-10-04 16:51:44,388] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-10-04 16:51:44,389] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2022-10-04 16:51:44,399] INFO [Controller id=2] Initialized broker epochs cache: HashMap(2 -> 27) (kafka.controller.KafkaController)
[2022-10-04 16:51:44,403] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2022-10-04 16:51:44,407] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:51:44,411] INFO [ExpirationReaper-2-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2022-10-04 16:51:44,413] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:51:44,415] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2022-10-04 16:51:44,415] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-10-04 16:51:44,415] INFO [Controller id=2] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-10-04 16:51:44,415] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-10-04 16:51:44,418] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,418] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,418] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-10-04 16:51:44,419] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-10-04 16:51:44,420] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2022-10-04 16:51:44,423] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2) for 0 partitions (state.change.logger)
[2022-10-04 16:51:44,428] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)
[2022-10-04 16:51:44,430] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:51:44,431] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:51:44,434] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:51:44,434] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-10-04 16:51:44,435] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:51:44,435] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.3:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:51:44,435] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:51:44,436] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Starting socket server acceptors and processors (kafka.network.SocketServer)
[2022-10-04 16:51:44,438] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-10-04 16:51:44,439] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-10-04 16:51:44,441] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started data-plane acceptor and processor(s) for endpoint : ListenerName(PLAINTEXT) (kafka.network.SocketServer)
[2022-10-04 16:51:44,442] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started socket server acceptors and processors (kafka.network.SocketServer)
[2022-10-04 16:51:44,444] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,445] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,446] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,446] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-10-04 16:51:44,446] INFO Kafka version: 7.1.0-ccs (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:51:44,446] INFO Kafka commitId: c86722379ab997cc (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:51:44,446] INFO Kafka startTimeMs: 1664902304442 (org.apache.kafka.common.utils.AppInfoParser)
[2022-10-04 16:51:44,448] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-10-04 16:51:44,448] INFO [KafkaServer id=2] started (kafka.server.KafkaServer)
[2022-10-04 16:51:44,457] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-10-04 16:51:44,489] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:51:44,505] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Recorded new controller, from now on will use broker 172.99.0.3:9092 (id: 2 rack: null) (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:51:44,556] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Recorded new controller, from now on will use broker 172.99.0.3:9092 (id: 2 rack: null) (kafka.server.BrokerToControllerRequestThread)
[2022-10-04 16:51:49,458] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-10-04 16:51:49,459] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-10-04 16:51:53,606] INFO [Controller id=2] Newly added brokers: 4, deleted brokers: , bounced brokers: , all live brokers: 2,4 (kafka.controller.KafkaController)
[2022-10-04 16:51:53,606] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 4 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:51:53,608] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:51:53,609] INFO [Controller id=2] New broker startup callback for 4 (kafka.controller.KafkaController)
[2022-10-04 16:51:53,610] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2) for 0 partitions (state.change.logger)
[2022-10-04 16:51:53,610] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(4) for 0 partitions (state.change.logger)
[2022-10-04 16:51:53,611] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.5:9092 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:51:53,612] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:51:53,612] DEBUG [Controller id=2] Register BrokerModifications handler for List(4) (kafka.controller.KafkaController)
[2022-10-04 16:51:53,613] INFO [Controller id=2] Updated broker epochs cache: HashMap(2 -> 27, 4 -> 55) (kafka.controller.KafkaController)
[2022-10-04 16:51:53,812] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:51:54,479] INFO [Controller id=2] Newly added brokers: 3, deleted brokers: , bounced brokers: , all live brokers: 2,3,4 (kafka.controller.KafkaController)
[2022-10-04 16:51:54,479] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:51:54,482] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:51:54,482] INFO [Controller id=2] New broker startup callback for 3 (kafka.controller.KafkaController)
[2022-10-04 16:51:54,482] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2, 4) for 0 partitions (state.change.logger)
[2022-10-04 16:51:54,482] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(3) for 0 partitions (state.change.logger)
[2022-10-04 16:51:54,483] DEBUG [Controller id=2] Register BrokerModifications handler for List(3) (kafka.controller.KafkaController)
[2022-10-04 16:51:54,483] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.4:9092 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:51:54,484] INFO [Controller id=2] Updated broker epochs cache: HashMap(2 -> 27, 3 -> 69, 4 -> 55) (kafka.controller.KafkaController)
[2022-10-04 16:51:54,484] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:51:54,484] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:51:54,679] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:51:59,577] INFO [Controller id=2] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 1,2,3,4 (kafka.controller.KafkaController)
[2022-10-04 16:51:59,577] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-10-04 16:51:59,579] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-10-04 16:51:59,579] INFO [Controller id=2] New broker startup callback for 1 (kafka.controller.KafkaController)
[2022-10-04 16:51:59,580] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(2, 3, 4) for 0 partitions (state.change.logger)
[2022-10-04 16:51:59,580] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 0 partitions (state.change.logger)
[2022-10-04 16:51:59,580] DEBUG [Controller id=2] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2022-10-04 16:51:59,581] INFO [RequestSendThread controllerId=2] Controller 2 connected to 172.99.0.6:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-10-04 16:51:59,581] INFO [Controller id=2] Updated broker epochs cache: HashMap(1 -> 85, 2 -> 27, 3 -> 69, 4 -> 55) (kafka.controller.KafkaController)
[2022-10-04 16:51:59,582] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 3 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:51:59,582] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:51:59,582] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 1 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:51:59,794] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 0 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:06,180] INFO Creating topic src with configuration {min.insync.replicas=3} and initial partition assignment HashMap(0 -> ArrayBuffer(4, 3, 1)) (kafka.zk.AdminZkClient)
[2022-10-04 16:53:06,196] INFO [Controller id=2] New topics: [Set(src)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(src,Some(fvZ_8kdlTey_bH8ANkPXNA),Map(src-0 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:53:06,197] INFO [Controller id=2] New partition creation callback for src-0 (kafka.controller.KafkaController)
[2022-10-04 16:53:06,199] INFO [Controller id=2 epoch=1] Changed partition src-0 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:06,199] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,202] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,202] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,202] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition src-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,202] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,265] INFO [Controller id=2 epoch=1] Changed partition src-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:06,267] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition src-0 (state.change.logger)
[2022-10-04 16:53:06,268] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,269] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition src-0 (state.change.logger)
[2022-10-04 16:53:06,269] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,270] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition src-0 (state.change.logger)
[2022-10-04 16:53:06,270] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,270] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 1 partitions (state.change.logger)
[2022-10-04 16:53:06,271] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,271] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,271] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition src-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,271] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,274] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='src', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition src-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 4 (state.change.logger)
[2022-10-04 16:53:06,274] INFO [Broker id=2] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 4 (state.change.logger)
[2022-10-04 16:53:06,278] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 4 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:06,325] INFO Creating topic output with configuration {min.insync.replicas=3} and initial partition assignment HashMap(0 -> ArrayBuffer(1, 3, 4)) (kafka.zk.AdminZkClient)
[2022-10-04 16:53:06,331] INFO [Controller id=2] New topics: [Set(output)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(output,Some(FFfK_MPPTPCsNLsmwpCYFw),Map(output-0 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:53:06,331] INFO [Controller id=2] New partition creation callback for output-0 (kafka.controller.KafkaController)
[2022-10-04 16:53:06,331] INFO [Controller id=2 epoch=1] Changed partition output-0 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:06,331] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,331] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,332] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,332] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition output-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:06,332] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,337] INFO [Controller id=2 epoch=1] Changed partition output-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:06,337] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition output-0 (state.change.logger)
[2022-10-04 16:53:06,337] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,338] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition output-0 (state.change.logger)
[2022-10-04 16:53:06,338] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,338] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition output-0 (state.change.logger)
[2022-10-04 16:53:06,338] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 0 become-leader and 1 become-follower partitions (state.change.logger)
[2022-10-04 16:53:06,338] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 1 partitions (state.change.logger)
[2022-10-04 16:53:06,339] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,339] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,339] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition output-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:06,339] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:06,340] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='output', partitionIndex=0, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition output-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 5 (state.change.logger)
[2022-10-04 16:53:06,340] INFO [Broker id=2] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 5 (state.change.logger)
[2022-10-04 16:53:06,341] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 5 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:06,366] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=fvZ_8kdlTey_bH8ANkPXNA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 3 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:06,372] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 4 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:06,384] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=fvZ_8kdlTey_bH8ANkPXNA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 2 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:06,388] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 3 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:06,401] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=FFfK_MPPTPCsNLsmwpCYFw, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 4 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:06,402] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 5 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:06,407] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=fvZ_8kdlTey_bH8ANkPXNA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 1 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:06,413] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 2 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:06,417] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=FFfK_MPPTPCsNLsmwpCYFw, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 5 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:06,419] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 6 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:06,436] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=FFfK_MPPTPCsNLsmwpCYFw, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 3 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:06,438] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 4 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:21,586] INFO [Controller id=2] New topics: [Set(__transaction_state)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__transaction_state,Some(e6zI8jveTYi3Yavni5flsQ),HashMap(__transaction_state-42 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __transaction_state-7 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-13 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __transaction_state-0 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-37 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __transaction_state-6 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __transaction_state-32 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-18 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __transaction_state-40 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-31 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-45 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __transaction_state-15 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-12 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-46 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __transaction_state-48 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-49 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __transaction_state-28 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-2 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __transaction_state-20 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-24 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-3 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-21 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __transaction_state-29 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __transaction_state-39 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-38 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __transaction_state-14 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __transaction_state-10 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __transaction_state-44 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-9 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __transaction_state-22 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __transaction_state-43 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-4 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-30 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __transaction_state-33 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __transaction_state-25 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __transaction_state-17 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __transaction_state-23 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-47 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-26 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __transaction_state-36 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __transaction_state-5 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __transaction_state-8 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __transaction_state-16 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __transaction_state-11 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __transaction_state-19 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __transaction_state-27 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __transaction_state-41 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __transaction_state-1 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __transaction_state-34 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __transaction_state-35 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:53:21,587] INFO [Controller id=2] New partition creation callback for __transaction_state-42,__transaction_state-7,__transaction_state-13,__transaction_state-0,__transaction_state-37,__transaction_state-6,__transaction_state-32,__transaction_state-18,__transaction_state-40,__transaction_state-31,__transaction_state-45,__transaction_state-15,__transaction_state-12,__transaction_state-46,__transaction_state-48,__transaction_state-49,__transaction_state-28,__transaction_state-2,__transaction_state-20,__transaction_state-24,__transaction_state-3,__transaction_state-21,__transaction_state-29,__transaction_state-39,__transaction_state-38,__transaction_state-14,__transaction_state-10,__transaction_state-44,__transaction_state-9,__transaction_state-22,__transaction_state-43,__transaction_state-4,__transaction_state-30,__transaction_state-33,__transaction_state-25,__transaction_state-17,__transaction_state-23,__transaction_state-47,__transaction_state-26,__transaction_state-36,__transaction_state-5,__transaction_state-8,__transaction_state-16,__transaction_state-11,__transaction_state-19,__transaction_state-27,__transaction_state-41,__transaction_state-1,__transaction_state-34,__transaction_state-35 (kafka.controller.KafkaController)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:21,587] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:21,588] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:21,589] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:21,589] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:21,589] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:21,589] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:21,589] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,591] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,592] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,593] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,594] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:21,595] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,661] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] INFO [Controller id=2 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:21,662] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:53:21,662] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:53:21,662] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:53:21,663] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:53:21,664] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 12 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:53:21,664] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:53:21,665] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 2 with 13 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-46 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-34 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-7 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:53:21,665] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-22 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-10 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-43 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-31 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-19 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:53:21,666] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 12 become-leader and 26 become-follower partitions (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-42 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-11 (state.change.logger)
[2022-10-04 16:53:21,666] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-44 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-15 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-48 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-3 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-36 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-38 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-40 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-26 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-28 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-30 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-32 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-18 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-20 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-24 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-12 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-14 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-47 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-16 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-2 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-35 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-4 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-6 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-39 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-8 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-27 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-0 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:53:21,667] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __transaction_state-23 (state.change.logger)
[2022-10-04 16:53:21,667] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 13 become-leader and 24 become-follower partitions (state.change.logger)
[2022-10-04 16:53:21,668] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 50 partitions (state.change.logger)
[2022-10-04 16:53:21,668] INFO [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 for 38 partitions (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,669] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,670] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 6 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,671] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,672] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __transaction_state-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __transaction_state-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:21,673] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:21,697] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:53:21,698] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-leader transition for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:53:21,699] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__transaction_state-45, __transaction_state-49, __transaction_state-13, __transaction_state-37, __transaction_state-9, __transaction_state-33, __transaction_state-5, __transaction_state-41, __transaction_state-1, __transaction_state-21, __transaction_state-29, __transaction_state-25, __transaction_state-17) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:21,699] INFO [Broker id=2] Stopped fetchers as part of LeaderAndIsr request correlationId 6 from controller 2 epoch 1 as part of the become-leader transition for 13 partitions (state.change.logger)
[2022-10-04 16:53:21,744] INFO [LogLoader partition=__transaction_state-5, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,754] INFO Created log for partition __transaction_state-5 in /var/lib/kafka/data/__transaction_state-5 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,755] INFO [Partition __transaction_state-5 broker=2] No checkpointed highwatermark is found for partition __transaction_state-5 (kafka.cluster.Partition)
[2022-10-04 16:53:21,756] INFO [Partition __transaction_state-5 broker=2] Log loaded for partition __transaction_state-5 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,757] INFO [Broker id=2] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,763] INFO [LogLoader partition=__transaction_state-37, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,764] INFO Created log for partition __transaction_state-37 in /var/lib/kafka/data/__transaction_state-37 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,764] INFO [Partition __transaction_state-37 broker=2] No checkpointed highwatermark is found for partition __transaction_state-37 (kafka.cluster.Partition)
[2022-10-04 16:53:21,764] INFO [Partition __transaction_state-37 broker=2] Log loaded for partition __transaction_state-37 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,764] INFO [Broker id=2] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,767] INFO [LogLoader partition=__transaction_state-1, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,767] INFO Created log for partition __transaction_state-1 in /var/lib/kafka/data/__transaction_state-1 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,767] INFO [Partition __transaction_state-1 broker=2] No checkpointed highwatermark is found for partition __transaction_state-1 (kafka.cluster.Partition)
[2022-10-04 16:53:21,767] INFO [Partition __transaction_state-1 broker=2] Log loaded for partition __transaction_state-1 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,767] INFO [Broker id=2] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,770] INFO [LogLoader partition=__transaction_state-33, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,770] INFO Created log for partition __transaction_state-33 in /var/lib/kafka/data/__transaction_state-33 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,770] INFO [Partition __transaction_state-33 broker=2] No checkpointed highwatermark is found for partition __transaction_state-33 (kafka.cluster.Partition)
[2022-10-04 16:53:21,770] INFO [Partition __transaction_state-33 broker=2] Log loaded for partition __transaction_state-33 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,770] INFO [Broker id=2] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,773] INFO [LogLoader partition=__transaction_state-13, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,773] INFO Created log for partition __transaction_state-13 in /var/lib/kafka/data/__transaction_state-13 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,773] INFO [Partition __transaction_state-13 broker=2] No checkpointed highwatermark is found for partition __transaction_state-13 (kafka.cluster.Partition)
[2022-10-04 16:53:21,773] INFO [Partition __transaction_state-13 broker=2] Log loaded for partition __transaction_state-13 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,773] INFO [Broker id=2] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,776] INFO [LogLoader partition=__transaction_state-45, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,776] INFO Created log for partition __transaction_state-45 in /var/lib/kafka/data/__transaction_state-45 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,776] INFO [Partition __transaction_state-45 broker=2] No checkpointed highwatermark is found for partition __transaction_state-45 (kafka.cluster.Partition)
[2022-10-04 16:53:21,776] INFO [Partition __transaction_state-45 broker=2] Log loaded for partition __transaction_state-45 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,776] INFO [Broker id=2] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,779] INFO [LogLoader partition=__transaction_state-9, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,779] INFO Created log for partition __transaction_state-9 in /var/lib/kafka/data/__transaction_state-9 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,779] INFO [Partition __transaction_state-9 broker=2] No checkpointed highwatermark is found for partition __transaction_state-9 (kafka.cluster.Partition)
[2022-10-04 16:53:21,779] INFO [Partition __transaction_state-9 broker=2] Log loaded for partition __transaction_state-9 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,779] INFO [Broker id=2] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,782] INFO [LogLoader partition=__transaction_state-41, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,783] INFO Created log for partition __transaction_state-41 in /var/lib/kafka/data/__transaction_state-41 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,783] INFO [Partition __transaction_state-41 broker=2] No checkpointed highwatermark is found for partition __transaction_state-41 (kafka.cluster.Partition)
[2022-10-04 16:53:21,783] INFO [Partition __transaction_state-41 broker=2] Log loaded for partition __transaction_state-41 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,783] INFO [Broker id=2] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,785] INFO [LogLoader partition=__transaction_state-21, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,786] INFO Created log for partition __transaction_state-21 in /var/lib/kafka/data/__transaction_state-21 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,786] INFO [Partition __transaction_state-21 broker=2] No checkpointed highwatermark is found for partition __transaction_state-21 (kafka.cluster.Partition)
[2022-10-04 16:53:21,786] INFO [Partition __transaction_state-21 broker=2] Log loaded for partition __transaction_state-21 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,786] INFO [Broker id=2] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,788] INFO [LogLoader partition=__transaction_state-17, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,789] INFO Created log for partition __transaction_state-17 in /var/lib/kafka/data/__transaction_state-17 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,789] INFO [Partition __transaction_state-17 broker=2] No checkpointed highwatermark is found for partition __transaction_state-17 (kafka.cluster.Partition)
[2022-10-04 16:53:21,789] INFO [Partition __transaction_state-17 broker=2] Log loaded for partition __transaction_state-17 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,789] INFO [Broker id=2] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,792] INFO [LogLoader partition=__transaction_state-49, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,793] INFO Created log for partition __transaction_state-49 in /var/lib/kafka/data/__transaction_state-49 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,793] INFO [Partition __transaction_state-49 broker=2] No checkpointed highwatermark is found for partition __transaction_state-49 (kafka.cluster.Partition)
[2022-10-04 16:53:21,793] INFO [Partition __transaction_state-49 broker=2] Log loaded for partition __transaction_state-49 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,793] INFO [Broker id=2] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,795] INFO [LogLoader partition=__transaction_state-29, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,796] INFO Created log for partition __transaction_state-29 in /var/lib/kafka/data/__transaction_state-29 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,796] INFO [Partition __transaction_state-29 broker=2] No checkpointed highwatermark is found for partition __transaction_state-29 (kafka.cluster.Partition)
[2022-10-04 16:53:21,796] INFO [Partition __transaction_state-29 broker=2] Log loaded for partition __transaction_state-29 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,796] INFO [Broker id=2] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,798] INFO [LogLoader partition=__transaction_state-25, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,798] INFO Created log for partition __transaction_state-25 in /var/lib/kafka/data/__transaction_state-25 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,798] INFO [Partition __transaction_state-25 broker=2] No checkpointed highwatermark is found for partition __transaction_state-25 (kafka.cluster.Partition)
[2022-10-04 16:53:21,798] INFO [Partition __transaction_state-25 broker=2] Log loaded for partition __transaction_state-25 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,798] INFO [Broker id=2] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-5 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-37 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-1 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-33 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-13 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-45 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-9 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-41 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-21 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-17 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-49 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-29 (state.change.logger)
[2022-10-04 16:53:21,800] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-leader transition for partition __transaction_state-25 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-7 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-22 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-3 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-18 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-0 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-15 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-30 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-8 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-19 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-34 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-31 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-46 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-12 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-27 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-42 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-24 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-39 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-20 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-32 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-43 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-6 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-36 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-48 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-44 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,802] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 6 from controller 2 epoch 1 starting the become-follower transition for partition __transaction_state-10 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,806] INFO [LogLoader partition=__transaction_state-7, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,807] INFO Created log for partition __transaction_state-7 in /var/lib/kafka/data/__transaction_state-7 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,807] INFO [Partition __transaction_state-7 broker=2] No checkpointed highwatermark is found for partition __transaction_state-7 (kafka.cluster.Partition)
[2022-10-04 16:53:21,807] INFO [Partition __transaction_state-7 broker=2] Log loaded for partition __transaction_state-7 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,807] INFO [Broker id=2] Follower __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,809] INFO [LogLoader partition=__transaction_state-22, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,810] INFO Created log for partition __transaction_state-22 in /var/lib/kafka/data/__transaction_state-22 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,810] INFO [Partition __transaction_state-22 broker=2] No checkpointed highwatermark is found for partition __transaction_state-22 (kafka.cluster.Partition)
[2022-10-04 16:53:21,810] INFO [Partition __transaction_state-22 broker=2] Log loaded for partition __transaction_state-22 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,810] INFO [Broker id=2] Follower __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,812] INFO [LogLoader partition=__transaction_state-3, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,812] INFO Created log for partition __transaction_state-3 in /var/lib/kafka/data/__transaction_state-3 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,812] INFO [Partition __transaction_state-3 broker=2] No checkpointed highwatermark is found for partition __transaction_state-3 (kafka.cluster.Partition)
[2022-10-04 16:53:21,812] INFO [Partition __transaction_state-3 broker=2] Log loaded for partition __transaction_state-3 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,812] INFO [Broker id=2] Follower __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,813] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=e6zI8jveTYi3Yavni5flsQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 6 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:21,814] INFO [LogLoader partition=__transaction_state-18, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,814] INFO Created log for partition __transaction_state-18 in /var/lib/kafka/data/__transaction_state-18 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,815] INFO [Partition __transaction_state-18 broker=2] No checkpointed highwatermark is found for partition __transaction_state-18 (kafka.cluster.Partition)
[2022-10-04 16:53:21,815] INFO [Partition __transaction_state-18 broker=2] Log loaded for partition __transaction_state-18 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,815] INFO [Broker id=2] Follower __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,816] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 7 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:21,817] INFO [LogLoader partition=__transaction_state-0, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,817] INFO Created log for partition __transaction_state-0 in /var/lib/kafka/data/__transaction_state-0 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,818] INFO [Partition __transaction_state-0 broker=2] No checkpointed highwatermark is found for partition __transaction_state-0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,818] INFO [Partition __transaction_state-0 broker=2] Log loaded for partition __transaction_state-0 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,818] INFO [Broker id=2] Follower __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,820] INFO [LogLoader partition=__transaction_state-15, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,821] INFO Created log for partition __transaction_state-15 in /var/lib/kafka/data/__transaction_state-15 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,821] INFO [Partition __transaction_state-15 broker=2] No checkpointed highwatermark is found for partition __transaction_state-15 (kafka.cluster.Partition)
[2022-10-04 16:53:21,821] INFO [Partition __transaction_state-15 broker=2] Log loaded for partition __transaction_state-15 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,821] INFO [Broker id=2] Follower __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,823] INFO [LogLoader partition=__transaction_state-30, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,824] INFO Created log for partition __transaction_state-30 in /var/lib/kafka/data/__transaction_state-30 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,824] INFO [Partition __transaction_state-30 broker=2] No checkpointed highwatermark is found for partition __transaction_state-30 (kafka.cluster.Partition)
[2022-10-04 16:53:21,824] INFO [Partition __transaction_state-30 broker=2] Log loaded for partition __transaction_state-30 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,824] INFO [Broker id=2] Follower __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,825] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=e6zI8jveTYi3Yavni5flsQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 7 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:21,827] INFO [LogLoader partition=__transaction_state-8, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,827] INFO Created log for partition __transaction_state-8 in /var/lib/kafka/data/__transaction_state-8 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,827] INFO [Partition __transaction_state-8 broker=2] No checkpointed highwatermark is found for partition __transaction_state-8 (kafka.cluster.Partition)
[2022-10-04 16:53:21,827] INFO [Partition __transaction_state-8 broker=2] Log loaded for partition __transaction_state-8 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,827] INFO [Broker id=2] Follower __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,829] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 8 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:21,829] INFO [LogLoader partition=__transaction_state-19, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,830] INFO Created log for partition __transaction_state-19 in /var/lib/kafka/data/__transaction_state-19 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,830] INFO [Partition __transaction_state-19 broker=2] No checkpointed highwatermark is found for partition __transaction_state-19 (kafka.cluster.Partition)
[2022-10-04 16:53:21,830] INFO [Partition __transaction_state-19 broker=2] Log loaded for partition __transaction_state-19 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,830] INFO [Broker id=2] Follower __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,833] INFO [LogLoader partition=__transaction_state-34, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,833] INFO Created log for partition __transaction_state-34 in /var/lib/kafka/data/__transaction_state-34 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,833] INFO [Partition __transaction_state-34 broker=2] No checkpointed highwatermark is found for partition __transaction_state-34 (kafka.cluster.Partition)
[2022-10-04 16:53:21,833] INFO [Partition __transaction_state-34 broker=2] Log loaded for partition __transaction_state-34 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,834] INFO [Broker id=2] Follower __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,835] INFO [LogLoader partition=__transaction_state-31, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,836] INFO Created log for partition __transaction_state-31 in /var/lib/kafka/data/__transaction_state-31 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,836] INFO [Partition __transaction_state-31 broker=2] No checkpointed highwatermark is found for partition __transaction_state-31 (kafka.cluster.Partition)
[2022-10-04 16:53:21,836] INFO [Partition __transaction_state-31 broker=2] Log loaded for partition __transaction_state-31 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,836] INFO [Broker id=2] Follower __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,838] INFO [LogLoader partition=__transaction_state-46, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,838] INFO Created log for partition __transaction_state-46 in /var/lib/kafka/data/__transaction_state-46 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,838] INFO [Partition __transaction_state-46 broker=2] No checkpointed highwatermark is found for partition __transaction_state-46 (kafka.cluster.Partition)
[2022-10-04 16:53:21,838] INFO [Partition __transaction_state-46 broker=2] Log loaded for partition __transaction_state-46 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,838] INFO [Broker id=2] Follower __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,840] INFO [LogLoader partition=__transaction_state-12, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,841] INFO Created log for partition __transaction_state-12 in /var/lib/kafka/data/__transaction_state-12 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,841] INFO [Partition __transaction_state-12 broker=2] No checkpointed highwatermark is found for partition __transaction_state-12 (kafka.cluster.Partition)
[2022-10-04 16:53:21,841] INFO [Partition __transaction_state-12 broker=2] Log loaded for partition __transaction_state-12 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,841] INFO [Broker id=2] Follower __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,843] INFO [LogLoader partition=__transaction_state-27, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,843] INFO Created log for partition __transaction_state-27 in /var/lib/kafka/data/__transaction_state-27 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,843] INFO [Partition __transaction_state-27 broker=2] No checkpointed highwatermark is found for partition __transaction_state-27 (kafka.cluster.Partition)
[2022-10-04 16:53:21,843] INFO [Partition __transaction_state-27 broker=2] Log loaded for partition __transaction_state-27 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,843] INFO [Broker id=2] Follower __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,845] INFO [LogLoader partition=__transaction_state-42, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,845] INFO Created log for partition __transaction_state-42 in /var/lib/kafka/data/__transaction_state-42 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,845] INFO [Partition __transaction_state-42 broker=2] No checkpointed highwatermark is found for partition __transaction_state-42 (kafka.cluster.Partition)
[2022-10-04 16:53:21,845] INFO [Partition __transaction_state-42 broker=2] Log loaded for partition __transaction_state-42 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,845] INFO [Broker id=2] Follower __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,847] INFO [LogLoader partition=__transaction_state-24, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,847] INFO Created log for partition __transaction_state-24 in /var/lib/kafka/data/__transaction_state-24 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,847] INFO [Partition __transaction_state-24 broker=2] No checkpointed highwatermark is found for partition __transaction_state-24 (kafka.cluster.Partition)
[2022-10-04 16:53:21,847] INFO [Partition __transaction_state-24 broker=2] Log loaded for partition __transaction_state-24 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,847] INFO [Broker id=2] Follower __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,849] INFO [LogLoader partition=__transaction_state-39, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,850] INFO Created log for partition __transaction_state-39 in /var/lib/kafka/data/__transaction_state-39 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,850] INFO [Partition __transaction_state-39 broker=2] No checkpointed highwatermark is found for partition __transaction_state-39 (kafka.cluster.Partition)
[2022-10-04 16:53:21,850] INFO [Partition __transaction_state-39 broker=2] Log loaded for partition __transaction_state-39 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,850] INFO [Broker id=2] Follower __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,851] INFO [LogLoader partition=__transaction_state-20, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,852] INFO Created log for partition __transaction_state-20 in /var/lib/kafka/data/__transaction_state-20 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,852] INFO [Partition __transaction_state-20 broker=2] No checkpointed highwatermark is found for partition __transaction_state-20 (kafka.cluster.Partition)
[2022-10-04 16:53:21,852] INFO [Partition __transaction_state-20 broker=2] Log loaded for partition __transaction_state-20 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,852] INFO [Broker id=2] Follower __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,854] INFO [LogLoader partition=__transaction_state-32, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,855] INFO Created log for partition __transaction_state-32 in /var/lib/kafka/data/__transaction_state-32 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,855] INFO [Partition __transaction_state-32 broker=2] No checkpointed highwatermark is found for partition __transaction_state-32 (kafka.cluster.Partition)
[2022-10-04 16:53:21,855] INFO [Partition __transaction_state-32 broker=2] Log loaded for partition __transaction_state-32 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,855] INFO [Broker id=2] Follower __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,857] INFO [LogLoader partition=__transaction_state-43, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,858] INFO Created log for partition __transaction_state-43 in /var/lib/kafka/data/__transaction_state-43 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,858] INFO [Partition __transaction_state-43 broker=2] No checkpointed highwatermark is found for partition __transaction_state-43 (kafka.cluster.Partition)
[2022-10-04 16:53:21,858] INFO [Partition __transaction_state-43 broker=2] Log loaded for partition __transaction_state-43 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,858] INFO [Broker id=2] Follower __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,860] INFO [LogLoader partition=__transaction_state-6, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,861] INFO Created log for partition __transaction_state-6 in /var/lib/kafka/data/__transaction_state-6 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,861] INFO [Partition __transaction_state-6 broker=2] No checkpointed highwatermark is found for partition __transaction_state-6 (kafka.cluster.Partition)
[2022-10-04 16:53:21,861] INFO [Partition __transaction_state-6 broker=2] Log loaded for partition __transaction_state-6 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,861] INFO [Broker id=2] Follower __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,863] INFO [LogLoader partition=__transaction_state-36, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,863] INFO Created log for partition __transaction_state-36 in /var/lib/kafka/data/__transaction_state-36 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,863] INFO [Partition __transaction_state-36 broker=2] No checkpointed highwatermark is found for partition __transaction_state-36 (kafka.cluster.Partition)
[2022-10-04 16:53:21,863] INFO [Partition __transaction_state-36 broker=2] Log loaded for partition __transaction_state-36 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,863] INFO [Broker id=2] Follower __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,865] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=e6zI8jveTYi3Yavni5flsQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 5 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:21,866] INFO [LogLoader partition=__transaction_state-48, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,866] INFO Created log for partition __transaction_state-48 in /var/lib/kafka/data/__transaction_state-48 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,866] INFO [Partition __transaction_state-48 broker=2] No checkpointed highwatermark is found for partition __transaction_state-48 (kafka.cluster.Partition)
[2022-10-04 16:53:21,866] INFO [Partition __transaction_state-48 broker=2] Log loaded for partition __transaction_state-48 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,867] INFO [Broker id=2] Follower __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,869] INFO [LogLoader partition=__transaction_state-44, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,869] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 6 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:21,869] INFO Created log for partition __transaction_state-44 in /var/lib/kafka/data/__transaction_state-44 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,869] INFO [Partition __transaction_state-44 broker=2] No checkpointed highwatermark is found for partition __transaction_state-44 (kafka.cluster.Partition)
[2022-10-04 16:53:21,869] INFO [Partition __transaction_state-44 broker=2] Log loaded for partition __transaction_state-44 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,870] INFO [Broker id=2] Follower __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,871] INFO [LogLoader partition=__transaction_state-10, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:21,872] INFO Created log for partition __transaction_state-10 in /var/lib/kafka/data/__transaction_state-10 with properties {cleanup.policy=compact, compression.type="uncompressed", min.insync.replicas=2, segment.bytes=104857600, unclean.leader.election.enable=false} (kafka.log.LogManager)
[2022-10-04 16:53:21,872] INFO [Partition __transaction_state-10 broker=2] No checkpointed highwatermark is found for partition __transaction_state-10 (kafka.cluster.Partition)
[2022-10-04 16:53:21,872] INFO [Partition __transaction_state-10 broker=2] Log loaded for partition __transaction_state-10 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:21,872] INFO [Broker id=2] Follower __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:21,872] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__transaction_state-42, __transaction_state-44, __transaction_state-46, __transaction_state-15, __transaction_state-48, __transaction_state-34, __transaction_state-3, __transaction_state-36, __transaction_state-7, __transaction_state-30, __transaction_state-32, __transaction_state-18, __transaction_state-20, __transaction_state-22, __transaction_state-24, __transaction_state-10, __transaction_state-43, __transaction_state-12, __transaction_state-6, __transaction_state-39, __transaction_state-8, __transaction_state-27, __transaction_state-31, __transaction_state-0, __transaction_state-19) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:21,873] INFO [Broker id=2] Stopped fetchers as part of become-follower request from controller 2 epoch 1 with correlation id 6 for 25 partitions (state.change.logger)
[2022-10-04 16:53:21,892] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,894] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 3 for partitions HashMap(__transaction_state-42 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-46 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-6 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-10 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-18 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-34 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-22 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __transaction_state-30 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:21,896] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-10 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,896] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,896] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-27 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,897] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 1 for partitions HashMap(__transaction_state-31 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-15 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-7 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-3 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-39 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-43 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-19 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __transaction_state-27 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:21,897] INFO [UnifiedLog partition=__transaction_state-10, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,897] INFO [UnifiedLog partition=__transaction_state-27, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,899] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-43 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,899] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-42 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,899] INFO [UnifiedLog partition=__transaction_state-43, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,899] INFO [UnifiedLog partition=__transaction_state-42, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,899] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-15 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,899] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-30 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,899] INFO [UnifiedLog partition=__transaction_state-15, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,899] INFO [UnifiedLog partition=__transaction_state-30, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-31 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-46 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [UnifiedLog partition=__transaction_state-31, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [UnifiedLog partition=__transaction_state-46, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-3 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Starting (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [UnifiedLog partition=__transaction_state-3, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-12 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-18 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,900] INFO [UnifiedLog partition=__transaction_state-12, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [UnifiedLog partition=__transaction_state-18, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-44 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,901] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 4 for partitions HashMap(__transaction_state-12 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-48 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-0 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-44 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-32 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-20 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-24 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-36 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __transaction_state-8 -> InitialFetchState(Some(e6zI8jveTYi3Yavni5flsQ),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:21,901] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-19 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,901] INFO [UnifiedLog partition=__transaction_state-19, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,901] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-7 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,901] INFO [UnifiedLog partition=__transaction_state-7, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,901] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __transaction_state-39 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,901] INFO [UnifiedLog partition=__transaction_state-39, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,902] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-7 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,902] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-22 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,900] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-34 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,903] INFO [UnifiedLog partition=__transaction_state-34, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,903] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-6 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,903] INFO [UnifiedLog partition=__transaction_state-6, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-3 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-18 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-0 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-15 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-30 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-8 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-19 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-34 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-31 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-46 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-12 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-27 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-42 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-24 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-39 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-20 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-32 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,903] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-43 with leader 1 (state.change.logger)
[2022-10-04 16:53:21,904] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-6 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,904] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-36 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,904] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-48 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,904] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-44 with leader 4 (state.change.logger)
[2022-10-04 16:53:21,904] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 6 from controller 2 epoch 1 for the become-follower transition for partition __transaction_state-10 with leader 3 (state.change.logger)
[2022-10-04 16:53:21,901] INFO [UnifiedLog partition=__transaction_state-44, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,903] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __transaction_state-22 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-32 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-22, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-32, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-48 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-48, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-0 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-0, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-20 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-20, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-36 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,905] INFO [UnifiedLog partition=__transaction_state-36, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,905] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-8 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,906] INFO [UnifiedLog partition=__transaction_state-8, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,906] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __transaction_state-24 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:21,906] INFO [UnifiedLog partition=__transaction_state-24, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:21,909] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 5 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 37 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 1 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 33 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 13 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 45 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 9 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 41 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-5 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 21 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 17 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 49 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,914] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 29 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,915] INFO [TransactionCoordinator id=2] Elected as the txn coordinator for partition 25 at epoch 0 (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,915] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 7 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,915] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-7 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 22 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-22 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 3 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-3 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 18 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-18 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 0 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-0 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 15 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-15 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 30 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-30 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 8 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-8 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 19 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-19 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 34 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-34 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 31 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-31 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 46 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-46 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 12 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-12 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 27 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-27 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 42 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-42 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 24 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-24 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 39 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-39 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 20 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-20 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 32 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-32 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 43 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-43 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,916] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 6 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,916] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-6 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,917] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 36 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,917] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-36 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,917] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 48 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,917] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-48 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,917] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 44 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,917] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-44 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,917] INFO [TransactionCoordinator id=2] Resigned as the txn coordinator for partition 10 at epoch Some(0) (kafka.coordinator.transaction.TransactionCoordinator)
[2022-10-04 16:53:21,917] INFO [Transaction State Manager 2]: No cached transaction metadata found for __transaction_state-10 during become-follower transition (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,918] INFO [Broker id=2] Finished LeaderAndIsr request in 251ms correlationId 6 from controller 2 for 38 partitions (state.change.logger)
[2022-10-04 16:53:21,919] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-5 in 5 milliseconds, of which 1 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,922] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=e6zI8jveTYi3Yavni5flsQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 6 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:21,922] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-5 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,922] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-37 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=42, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __transaction_state-42 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=13, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __transaction_state-13 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=46, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __transaction_state-46 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=17, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __transaction_state-17 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=34, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __transaction_state-34 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=5, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __transaction_state-5 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=38, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __transaction_state-38 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=9, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __transaction_state-9 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=26, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __transaction_state-26 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=30, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __transaction_state-30 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=1, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __transaction_state-1 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=18, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __transaction_state-18 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=22, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __transaction_state-22 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=12, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-12 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=45, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __transaction_state-45 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=16, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-16 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=49, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __transaction_state-49 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=4, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-4 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=37, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __transaction_state-37 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=8, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-8 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=41, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __transaction_state-41 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,923] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=29, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __transaction_state-29 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=0, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=33, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __transaction_state-33 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=21, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __transaction_state-21 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=25, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __transaction_state-25 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=11, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-11 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=44, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-44 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=15, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-15 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=48, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-48 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=3, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-3 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=36, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-36 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=7, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-7 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=40, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-40 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=28, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __transaction_state-28 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=32, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-32 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=20, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __transaction_state-20 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=24, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __transaction_state-24 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=10, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __transaction_state-10 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=43, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-43 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=14, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __transaction_state-14 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=47, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-47 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=2, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __transaction_state-2 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=35, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-35 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=6, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __transaction_state-6 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=39, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-39 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=27, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __transaction_state-27 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=31, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-31 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=19, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __transaction_state-19 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__transaction_state', partitionIndex=23, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __transaction_state-23 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,924] INFO [Broker id=2] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 7 (state.change.logger)
[2022-10-04 16:53:21,925] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 7 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:21,925] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-37 in 11 milliseconds, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,925] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-37 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,925] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-1 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,927] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-1 in 13 milliseconds, of which 11 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,927] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-1 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,927] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-33 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,929] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-33 in 15 milliseconds, of which 13 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,929] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-33 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,929] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-13 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,931] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-13 in 17 milliseconds, of which 15 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,931] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-13 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,931] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-45 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,933] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-45 in 19 milliseconds, of which 17 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,933] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-45 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,933] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-9 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,935] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-9 in 21 milliseconds, of which 19 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,935] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-9 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,935] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-41 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,936] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-41 in 22 milliseconds, of which 21 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,936] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-41 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,936] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-21 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,938] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-21 in 24 milliseconds, of which 22 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,938] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-21 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,938] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-17 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,940] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-17 in 26 milliseconds, of which 24 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,940] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-17 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,940] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-49 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,942] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-49 in 28 milliseconds, of which 26 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,942] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-49 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,942] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-29 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,943] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-29 in 28 milliseconds, of which 27 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,943] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-29 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,943] INFO [Transaction State Manager 2]: Loading transaction metadata from __transaction_state-25 at epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,945] INFO [Transaction State Manager 2]: Finished loading 0 transaction metadata from __transaction_state-25 in 30 milliseconds, of which 28 milliseconds was spent in the scheduler. (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:21,945] INFO [Transaction State Manager 2]: Completed loading transaction metadata from __transaction_state-25 for coordinator epoch 0 (kafka.coordinator.transaction.TransactionStateManager)
[2022-10-04 16:53:22,010] DEBUG [Controller id=2] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2022-10-04 16:53:22,013] INFO [Controller id=2] Acquired new producerId block ProducerIdsBlock{brokerId=4, producerIdStart=0, producerIdLen=1000} by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2022-10-04 16:53:22,060] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(2axtpQG2SN-5uuqODuYulA),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=4,1,2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=4,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=4,2,3, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2,3,1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=3,2,1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=3,1,4, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=3,4,2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1,3,4, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2,4,3, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2,1,4, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-10-04 16:53:22,060] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 4,1,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 4,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 1,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 4,2,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 2,3,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 3,2,1 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 3,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 1,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 3,4,2 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 1,3,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 2,4,3 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 2,1,4 (state.change.logger)
[2022-10-04 16:53:22,061] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,062] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,063] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-0 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-45 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-18 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-48 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-33 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-30 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-36 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-42 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-24 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-21 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-12 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-6 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-9 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-11 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-22 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-35 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-20 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-7 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-41 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-49 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-19 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-4 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-44 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-28 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-43 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-2 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-39 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-3 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-25 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-8 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-47 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-46 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-31 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-15 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-26 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-1 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-14 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-16 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-37 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-27 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-5 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-13 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-10 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-17 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-29 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-40 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-34 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-38 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-32 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-23 from NonExistentReplica to NewReplica (state.change.logger)
[2022-10-04 16:53:22,064] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 1, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,115] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=4, leaderEpoch=0, isr=List(4, 2, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 3, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 2, 1), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=3, leaderEpoch=0, isr=List(3, 4, 2), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1, 3, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 4, 3), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=2, leaderEpoch=0, isr=List(2, 1, 4), zkVersion=0) (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:53:22,116] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 1 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:53:22,116] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 1 with 12 become-leader and 26 become-follower partitions (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:53:22,117] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 2 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:53:22,117] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 2 with 13 become-leader and 24 become-follower partitions (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-9 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-42 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-21 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-30 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-45 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-18 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-6 (state.change.logger)
[2022-10-04 16:53:22,118] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 3 for partition __consumer_offsets-33 (state.change.logger)
[2022-10-04 16:53:22,118] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 3 with 13 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:53:22,119] INFO [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 for 37 partitions (state.change.logger)
[2022-10-04 16:53:22,119] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-15 (state.change.logger)
[2022-10-04 16:53:22,119] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,119] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-13 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-46 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-11 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,120] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,121] TRACE [Broker id=2] Received LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) correlation id 8 from controller 2 epoch 1 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-23 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-19 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-17 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-26 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-7 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-5 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-38 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-3 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-1 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-34 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-47 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-14 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-43 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-41 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-10 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-22 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-49 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-31 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-29 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-27 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-25 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-39 (state.change.logger)
[2022-10-04 16:53:22,130] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:53:22,131] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-37 (state.change.logger)
[2022-10-04 16:53:22,131] TRACE [Controller id=2 epoch=1] Sending become-leader LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-35 (state.change.logger)
[2022-10-04 16:53:22,131] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:53:22,131] TRACE [Controller id=2 epoch=1] Sending become-follower LeaderAndIsr request LeaderAndIsrPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], addingReplicas=[], removingReplicas=[], isNew=true) to broker 4 for partition __consumer_offsets-2 (state.change.logger)
[2022-10-04 16:53:22,131] INFO [Controller id=2 epoch=1] Sending LeaderAndIsr request to broker 4 with 12 become-leader and 25 become-follower partitions (state.change.logger)
[2022-10-04 16:53:22,131] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3, 4) for 50 partitions (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,132] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 1 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,133] TRACE [Controller id=2 epoch=1] Changed state of replica 2 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-0 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-45 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-18 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-48 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-33 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-30 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-36 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-42 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-24 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-21 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-12 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-6 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-9 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 3 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-11 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-22 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-35 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-20 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-7 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-41 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-49 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-19 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-4 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-44 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-28 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-43 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-2 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-39 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-3 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-25 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-8 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-47 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-46 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-31 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-15 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-26 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-1 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-14 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-16 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-37 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-27 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-5 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-13 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-10 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-17 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-29 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-40 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-34 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-38 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-32 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,134] TRACE [Controller id=2 epoch=1] Changed state of replica 4 for partition __consumer_offsets-23 from NewReplica to OnlineReplica (state.change.logger)
[2022-10-04 16:53:22,135] INFO [Controller id=2 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:53:22,141] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-leader transition for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:53:22,142] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__consumer_offsets-36, __consumer_offsets-24, __consumer_offsets-48, __consumer_offsets-12, __consumer_offsets-8, __consumer_offsets-4, __consumer_offsets-16, __consumer_offsets-28, __consumer_offsets-20, __consumer_offsets-0, __consumer_offsets-44, __consumer_offsets-32, __consumer_offsets-40) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:22,143] INFO [Broker id=2] Stopped fetchers as part of LeaderAndIsr request correlationId 8 from controller 2 epoch 1 as part of the become-leader transition for 13 partitions (state.change.logger)
[2022-10-04 16:53:22,145] INFO [LogLoader partition=__consumer_offsets-20, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,146] INFO Created log for partition __consumer_offsets-20 in /var/lib/kafka/data/__consumer_offsets-20 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,147] INFO [Partition __consumer_offsets-20 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-20 (kafka.cluster.Partition)
[2022-10-04 16:53:22,148] INFO [Partition __consumer_offsets-20 broker=2] Log loaded for partition __consumer_offsets-20 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,148] INFO [Broker id=2] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,150] INFO [LogLoader partition=__consumer_offsets-24, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,151] INFO Created log for partition __consumer_offsets-24 in /var/lib/kafka/data/__consumer_offsets-24 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,151] INFO [Partition __consumer_offsets-24 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-24 (kafka.cluster.Partition)
[2022-10-04 16:53:22,151] INFO [Partition __consumer_offsets-24 broker=2] Log loaded for partition __consumer_offsets-24 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,151] INFO [Broker id=2] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,154] INFO [LogLoader partition=__consumer_offsets-12, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,155] INFO Created log for partition __consumer_offsets-12 in /var/lib/kafka/data/__consumer_offsets-12 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,155] INFO [Partition __consumer_offsets-12 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-12 (kafka.cluster.Partition)
[2022-10-04 16:53:22,155] INFO [Partition __consumer_offsets-12 broker=2] Log loaded for partition __consumer_offsets-12 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,155] INFO [Broker id=2] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,158] INFO [LogLoader partition=__consumer_offsets-44, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,158] INFO Created log for partition __consumer_offsets-44 in /var/lib/kafka/data/__consumer_offsets-44 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,158] INFO [Partition __consumer_offsets-44 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-44 (kafka.cluster.Partition)
[2022-10-04 16:53:22,158] INFO [Partition __consumer_offsets-44 broker=2] Log loaded for partition __consumer_offsets-44 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,158] INFO [Broker id=2] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,161] INFO [LogLoader partition=__consumer_offsets-48, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,161] INFO Created log for partition __consumer_offsets-48 in /var/lib/kafka/data/__consumer_offsets-48 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,162] INFO [Partition __consumer_offsets-48 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-48 (kafka.cluster.Partition)
[2022-10-04 16:53:22,162] INFO [Partition __consumer_offsets-48 broker=2] Log loaded for partition __consumer_offsets-48 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,162] INFO [Broker id=2] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,164] INFO [LogLoader partition=__consumer_offsets-16, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,165] INFO Created log for partition __consumer_offsets-16 in /var/lib/kafka/data/__consumer_offsets-16 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,165] INFO [Partition __consumer_offsets-16 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-16 (kafka.cluster.Partition)
[2022-10-04 16:53:22,165] INFO [Partition __consumer_offsets-16 broker=2] Log loaded for partition __consumer_offsets-16 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,165] INFO [Broker id=2] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,167] INFO [LogLoader partition=__consumer_offsets-4, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,168] INFO Created log for partition __consumer_offsets-4 in /var/lib/kafka/data/__consumer_offsets-4 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,168] INFO [Partition __consumer_offsets-4 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-4 (kafka.cluster.Partition)
[2022-10-04 16:53:22,168] INFO [Partition __consumer_offsets-4 broker=2] Log loaded for partition __consumer_offsets-4 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,168] INFO [Broker id=2] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,171] INFO [LogLoader partition=__consumer_offsets-36, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,171] INFO Created log for partition __consumer_offsets-36 in /var/lib/kafka/data/__consumer_offsets-36 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,171] INFO [Partition __consumer_offsets-36 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-36 (kafka.cluster.Partition)
[2022-10-04 16:53:22,171] INFO [Partition __consumer_offsets-36 broker=2] Log loaded for partition __consumer_offsets-36 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,171] INFO [Broker id=2] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,174] INFO [LogLoader partition=__consumer_offsets-8, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,174] INFO Created log for partition __consumer_offsets-8 in /var/lib/kafka/data/__consumer_offsets-8 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,175] INFO [Partition __consumer_offsets-8 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-8 (kafka.cluster.Partition)
[2022-10-04 16:53:22,175] INFO [Partition __consumer_offsets-8 broker=2] Log loaded for partition __consumer_offsets-8 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,175] INFO [Broker id=2] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,177] INFO [LogLoader partition=__consumer_offsets-40, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,177] INFO Created log for partition __consumer_offsets-40 in /var/lib/kafka/data/__consumer_offsets-40 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,177] INFO [Partition __consumer_offsets-40 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-40 (kafka.cluster.Partition)
[2022-10-04 16:53:22,177] INFO [Partition __consumer_offsets-40 broker=2] Log loaded for partition __consumer_offsets-40 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,177] INFO [Broker id=2] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,180] INFO [LogLoader partition=__consumer_offsets-28, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,180] INFO Created log for partition __consumer_offsets-28 in /var/lib/kafka/data/__consumer_offsets-28 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,180] INFO [Partition __consumer_offsets-28 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-28 (kafka.cluster.Partition)
[2022-10-04 16:53:22,180] INFO [Partition __consumer_offsets-28 broker=2] Log loaded for partition __consumer_offsets-28 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,180] INFO [Broker id=2] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,1,4] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,183] INFO [LogLoader partition=__consumer_offsets-0, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,184] INFO Created log for partition __consumer_offsets-0 in /var/lib/kafka/data/__consumer_offsets-0 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,184] INFO [Partition __consumer_offsets-0 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,184] INFO [Partition __consumer_offsets-0 broker=2] Log loaded for partition __consumer_offsets-0 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,184] INFO [Broker id=2] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,3,1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,186] INFO [LogLoader partition=__consumer_offsets-32, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,187] INFO Created log for partition __consumer_offsets-32 in /var/lib/kafka/data/__consumer_offsets-32 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,187] INFO [Partition __consumer_offsets-32 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-32 (kafka.cluster.Partition)
[2022-10-04 16:53:22,187] INFO [Partition __consumer_offsets-32 broker=2] Log loaded for partition __consumer_offsets-32 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,187] INFO [Broker id=2] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [2,4,3] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-20 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-24 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-12 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-44 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-48 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-16 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-36 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-8 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-40 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-28 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-0 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-leader transition for partition __consumer_offsets-32 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-3 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-18 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-41 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-29 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-14 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-33 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-23 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-38 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-11 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-26 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-45 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-15 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-30 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-35 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-5 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-39 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-9 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-27 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-42 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-2 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-21 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-6 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-47 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,188] TRACE [Broker id=2] Handling LeaderAndIsr request correlationId 8 from controller 2 epoch 1 starting the become-follower transition for partition __consumer_offsets-17 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,190] INFO [LogLoader partition=__consumer_offsets-3, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,191] INFO Created log for partition __consumer_offsets-3 in /var/lib/kafka/data/__consumer_offsets-3 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,191] INFO [Partition __consumer_offsets-3 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-3 (kafka.cluster.Partition)
[2022-10-04 16:53:22,191] INFO [Partition __consumer_offsets-3 broker=2] Log loaded for partition __consumer_offsets-3 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,191] INFO [Broker id=2] Follower __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,193] INFO [LogLoader partition=__consumer_offsets-18, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,193] INFO Created log for partition __consumer_offsets-18 in /var/lib/kafka/data/__consumer_offsets-18 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,193] INFO [Partition __consumer_offsets-18 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-18 (kafka.cluster.Partition)
[2022-10-04 16:53:22,193] INFO [Partition __consumer_offsets-18 broker=2] Log loaded for partition __consumer_offsets-18 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,193] INFO [Broker id=2] Follower __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,195] INFO [LogLoader partition=__consumer_offsets-41, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,196] INFO Created log for partition __consumer_offsets-41 in /var/lib/kafka/data/__consumer_offsets-41 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,196] INFO [Partition __consumer_offsets-41 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-41 (kafka.cluster.Partition)
[2022-10-04 16:53:22,196] INFO [Partition __consumer_offsets-41 broker=2] Log loaded for partition __consumer_offsets-41 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,196] INFO [Broker id=2] Follower __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,198] INFO [LogLoader partition=__consumer_offsets-29, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,199] INFO Created log for partition __consumer_offsets-29 in /var/lib/kafka/data/__consumer_offsets-29 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,199] INFO [Partition __consumer_offsets-29 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-29 (kafka.cluster.Partition)
[2022-10-04 16:53:22,199] INFO [Partition __consumer_offsets-29 broker=2] Log loaded for partition __consumer_offsets-29 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,199] INFO [Broker id=2] Follower __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,201] INFO [LogLoader partition=__consumer_offsets-14, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,201] INFO Created log for partition __consumer_offsets-14 in /var/lib/kafka/data/__consumer_offsets-14 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,201] INFO [Partition __consumer_offsets-14 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-14 (kafka.cluster.Partition)
[2022-10-04 16:53:22,201] INFO [Partition __consumer_offsets-14 broker=2] Log loaded for partition __consumer_offsets-14 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,201] INFO [Broker id=2] Follower __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,203] INFO [LogLoader partition=__consumer_offsets-33, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,204] INFO Created log for partition __consumer_offsets-33 in /var/lib/kafka/data/__consumer_offsets-33 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,204] INFO [Partition __consumer_offsets-33 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-33 (kafka.cluster.Partition)
[2022-10-04 16:53:22,204] INFO [Partition __consumer_offsets-33 broker=2] Log loaded for partition __consumer_offsets-33 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,204] INFO [Broker id=2] Follower __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,205] INFO [LogLoader partition=__consumer_offsets-23, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,206] INFO Created log for partition __consumer_offsets-23 in /var/lib/kafka/data/__consumer_offsets-23 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,206] INFO [Partition __consumer_offsets-23 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-23 (kafka.cluster.Partition)
[2022-10-04 16:53:22,206] INFO [Partition __consumer_offsets-23 broker=2] Log loaded for partition __consumer_offsets-23 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,206] INFO [Broker id=2] Follower __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,208] INFO [LogLoader partition=__consumer_offsets-38, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,208] INFO Created log for partition __consumer_offsets-38 in /var/lib/kafka/data/__consumer_offsets-38 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,208] INFO [Partition __consumer_offsets-38 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-38 (kafka.cluster.Partition)
[2022-10-04 16:53:22,208] INFO [Partition __consumer_offsets-38 broker=2] Log loaded for partition __consumer_offsets-38 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,208] INFO [Broker id=2] Follower __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,210] INFO [LogLoader partition=__consumer_offsets-11, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,211] INFO Created log for partition __consumer_offsets-11 in /var/lib/kafka/data/__consumer_offsets-11 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,211] INFO [Partition __consumer_offsets-11 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-11 (kafka.cluster.Partition)
[2022-10-04 16:53:22,211] INFO [Partition __consumer_offsets-11 broker=2] Log loaded for partition __consumer_offsets-11 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,211] INFO [Broker id=2] Follower __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,212] INFO [LogLoader partition=__consumer_offsets-26, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,213] INFO Created log for partition __consumer_offsets-26 in /var/lib/kafka/data/__consumer_offsets-26 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,213] INFO [Partition __consumer_offsets-26 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-26 (kafka.cluster.Partition)
[2022-10-04 16:53:22,213] INFO [Partition __consumer_offsets-26 broker=2] Log loaded for partition __consumer_offsets-26 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,213] INFO [Broker id=2] Follower __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,214] INFO [LogLoader partition=__consumer_offsets-45, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,215] INFO Created log for partition __consumer_offsets-45 in /var/lib/kafka/data/__consumer_offsets-45 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,215] INFO [Partition __consumer_offsets-45 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-45 (kafka.cluster.Partition)
[2022-10-04 16:53:22,215] INFO [Partition __consumer_offsets-45 broker=2] Log loaded for partition __consumer_offsets-45 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,215] INFO [Broker id=2] Follower __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,216] INFO [LogLoader partition=__consumer_offsets-15, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,217] INFO Created log for partition __consumer_offsets-15 in /var/lib/kafka/data/__consumer_offsets-15 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,217] INFO [Partition __consumer_offsets-15 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-15 (kafka.cluster.Partition)
[2022-10-04 16:53:22,217] INFO [Partition __consumer_offsets-15 broker=2] Log loaded for partition __consumer_offsets-15 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,217] INFO [Broker id=2] Follower __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,218] INFO [LogLoader partition=__consumer_offsets-30, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,219] INFO Created log for partition __consumer_offsets-30 in /var/lib/kafka/data/__consumer_offsets-30 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,219] INFO [Partition __consumer_offsets-30 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-30 (kafka.cluster.Partition)
[2022-10-04 16:53:22,219] INFO [Partition __consumer_offsets-30 broker=2] Log loaded for partition __consumer_offsets-30 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,219] INFO [Broker id=2] Follower __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,220] INFO [LogLoader partition=__consumer_offsets-35, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,221] INFO Created log for partition __consumer_offsets-35 in /var/lib/kafka/data/__consumer_offsets-35 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,221] INFO [Partition __consumer_offsets-35 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-35 (kafka.cluster.Partition)
[2022-10-04 16:53:22,221] INFO [Partition __consumer_offsets-35 broker=2] Log loaded for partition __consumer_offsets-35 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,221] INFO [Broker id=2] Follower __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,222] INFO [LogLoader partition=__consumer_offsets-5, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,223] INFO Created log for partition __consumer_offsets-5 in /var/lib/kafka/data/__consumer_offsets-5 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,223] INFO [Partition __consumer_offsets-5 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-5 (kafka.cluster.Partition)
[2022-10-04 16:53:22,223] INFO [Partition __consumer_offsets-5 broker=2] Log loaded for partition __consumer_offsets-5 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,223] INFO [Broker id=2] Follower __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,224] INFO [LogLoader partition=__consumer_offsets-39, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,225] INFO Created log for partition __consumer_offsets-39 in /var/lib/kafka/data/__consumer_offsets-39 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,225] INFO [Partition __consumer_offsets-39 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-39 (kafka.cluster.Partition)
[2022-10-04 16:53:22,225] INFO [Partition __consumer_offsets-39 broker=2] Log loaded for partition __consumer_offsets-39 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,225] INFO [Broker id=2] Follower __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,226] INFO [LogLoader partition=__consumer_offsets-9, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,227] INFO Created log for partition __consumer_offsets-9 in /var/lib/kafka/data/__consumer_offsets-9 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,227] INFO [Partition __consumer_offsets-9 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-9 (kafka.cluster.Partition)
[2022-10-04 16:53:22,227] INFO [Partition __consumer_offsets-9 broker=2] Log loaded for partition __consumer_offsets-9 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,227] INFO [Broker id=2] Follower __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,228] INFO [LogLoader partition=__consumer_offsets-27, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,228] INFO Created log for partition __consumer_offsets-27 in /var/lib/kafka/data/__consumer_offsets-27 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,228] INFO [Partition __consumer_offsets-27 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-27 (kafka.cluster.Partition)
[2022-10-04 16:53:22,228] INFO [Partition __consumer_offsets-27 broker=2] Log loaded for partition __consumer_offsets-27 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,228] INFO [Broker id=2] Follower __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,230] INFO [LogLoader partition=__consumer_offsets-42, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,230] INFO Created log for partition __consumer_offsets-42 in /var/lib/kafka/data/__consumer_offsets-42 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,230] INFO [Partition __consumer_offsets-42 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-42 (kafka.cluster.Partition)
[2022-10-04 16:53:22,230] INFO [Partition __consumer_offsets-42 broker=2] Log loaded for partition __consumer_offsets-42 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,230] INFO [Broker id=2] Follower __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,232] INFO [LogLoader partition=__consumer_offsets-2, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,232] INFO Created log for partition __consumer_offsets-2 in /var/lib/kafka/data/__consumer_offsets-2 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,232] INFO [Partition __consumer_offsets-2 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-2 (kafka.cluster.Partition)
[2022-10-04 16:53:22,232] INFO [Partition __consumer_offsets-2 broker=2] Log loaded for partition __consumer_offsets-2 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,232] INFO [Broker id=2] Follower __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,235] INFO [LogLoader partition=__consumer_offsets-21, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,235] INFO Created log for partition __consumer_offsets-21 in /var/lib/kafka/data/__consumer_offsets-21 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,235] INFO [Partition __consumer_offsets-21 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-21 (kafka.cluster.Partition)
[2022-10-04 16:53:22,235] INFO [Partition __consumer_offsets-21 broker=2] Log loaded for partition __consumer_offsets-21 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,235] INFO [Broker id=2] Follower __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,237] INFO [LogLoader partition=__consumer_offsets-6, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,238] INFO Created log for partition __consumer_offsets-6 in /var/lib/kafka/data/__consumer_offsets-6 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,238] INFO [Partition __consumer_offsets-6 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-6 (kafka.cluster.Partition)
[2022-10-04 16:53:22,238] INFO [Partition __consumer_offsets-6 broker=2] Log loaded for partition __consumer_offsets-6 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,238] INFO [Broker id=2] Follower __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,238] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=2axtpQG2SN-5uuqODuYulA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 8 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:22,240] INFO [LogLoader partition=__consumer_offsets-47, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,240] INFO Created log for partition __consumer_offsets-47 in /var/lib/kafka/data/__consumer_offsets-47 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,240] INFO [Partition __consumer_offsets-47 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-47 (kafka.cluster.Partition)
[2022-10-04 16:53:22,240] INFO [Partition __consumer_offsets-47 broker=2] Log loaded for partition __consumer_offsets-47 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,240] INFO [Broker id=2] Follower __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,241] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 9 sent to broker 172.99.0.4:9092 (id: 3 rack: null) (state.change.logger)
[2022-10-04 16:53:22,242] INFO [LogLoader partition=__consumer_offsets-17, dir=/var/lib/kafka/data] Loading producer state till offset 0 with message format version 2 (kafka.log.UnifiedLog$)
[2022-10-04 16:53:22,243] INFO Created log for partition __consumer_offsets-17 in /var/lib/kafka/data/__consumer_offsets-17 with properties {cleanup.policy=compact, compression.type="producer", segment.bytes=104857600} (kafka.log.LogManager)
[2022-10-04 16:53:22,243] INFO [Partition __consumer_offsets-17 broker=2] No checkpointed highwatermark is found for partition __consumer_offsets-17 (kafka.cluster.Partition)
[2022-10-04 16:53:22,243] INFO [Partition __consumer_offsets-17 broker=2] Log loaded for partition __consumer_offsets-17 with initial high watermark 0 (kafka.cluster.Partition)
[2022-10-04 16:53:22,243] INFO [Broker id=2] Follower __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0. Previous leader epoch was -1. (state.change.logger)
[2022-10-04 16:53:22,243] INFO [ReplicaFetcherManager on broker 2] Removed fetcher for partitions HashSet(__consumer_offsets-15, __consumer_offsets-11, __consumer_offsets-9, __consumer_offsets-42, __consumer_offsets-23, __consumer_offsets-21, __consumer_offsets-17, __consumer_offsets-30, __consumer_offsets-26, __consumer_offsets-5, __consumer_offsets-38, __consumer_offsets-3, __consumer_offsets-47, __consumer_offsets-45, __consumer_offsets-14, __consumer_offsets-41, __consumer_offsets-18, __consumer_offsets-29, __consumer_offsets-27, __consumer_offsets-39, __consumer_offsets-6, __consumer_offsets-35, __consumer_offsets-33, __consumer_offsets-2) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:22,243] INFO [Broker id=2] Stopped fetchers as part of become-follower request from controller 2 epoch 1 with correlation id 8 for 24 partitions (state.change.logger)
[2022-10-04 16:53:22,245] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 3 for partitions HashMap(__consumer_offsets-21 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-9 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-17 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-29 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-41 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-33 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-45 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0), __consumer_offsets-5 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=3, host=172.99.0.4:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:22,245] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 1 for partitions HashMap(__consumer_offsets-30 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-38 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-26 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-42 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-18 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-2 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-6 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0), __consumer_offsets-14 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=1, host=172.99.0.6:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:22,245] INFO [ReplicaFetcherManager on broker 2] Added fetcher to broker 4 for partitions HashMap(__consumer_offsets-27 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-35 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-23 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-47 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-3 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-15 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-11 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0), __consumer_offsets-39 -> InitialFetchState(Some(2axtpQG2SN-5uuqODuYulA),BrokerEndPoint(id=4, host=172.99.0.5:9092),0,0)) (kafka.server.ReplicaFetcherManager)
[2022-10-04 16:53:22,245] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-3 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,245] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-18 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-41 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-29 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-14 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-33 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-23 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-38 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-11 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-26 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-45 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-15 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-30 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-35 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-5 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-39 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-9 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-27 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-42 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-2 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-21 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-6 with leader 1 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-47 with leader 4 (state.change.logger)
[2022-10-04 16:53:22,246] TRACE [Broker id=2] Completed LeaderAndIsr request correlationId 8 from controller 2 epoch 1 for the become-follower transition for partition __consumer_offsets-17 with leader 3 (state.change.logger)
[2022-10-04 16:53:22,247] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 20 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,248] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-20 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 24 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-24 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 12 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-12 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 44 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-44 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 48 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-48 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 16 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-16 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 4 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-4 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 36 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-36 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 8 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-8 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 40 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-40 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 28 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-28 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 0 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-0 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,249] INFO [GroupCoordinator 2]: Elected as the group coordinator for partition 32 in epoch 0 (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,249] INFO [GroupMetadataManager brokerId=2] Scheduling loading of offsets and group metadata from __consumer_offsets-32 for epoch 0 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,250] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 3 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,250] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-3 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 18 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-18 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 41 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-41 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 29 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-29 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 14 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-14 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 33 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-33 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 23 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-23 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 38 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-38 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 11 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-11 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 26 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-26 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 45 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-45 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 15 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-15 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 30 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-30 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 35 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-35 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 5 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-5 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 39 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-39 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 9 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-9 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 27 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-27 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 42 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-42 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 2 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-2 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 21 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-21 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 6 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-6 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 47 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-47 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [GroupCoordinator 2]: Resigned as the group coordinator for partition 17 in epoch Some(0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,251] INFO [GroupMetadataManager brokerId=2] Scheduling unloading of offsets and group metadata from __consumer_offsets-17 (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,251] INFO [Broker id=2] Finished LeaderAndIsr request in 132ms correlationId 8 from controller 2 for 37 partitions (state.change.logger)
[2022-10-04 16:53:22,252] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=2axtpQG2SN-5uuqODuYulA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 8 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:22,254] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-13 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,254] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-46 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,254] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __consumer_offsets-9 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,254] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=2axtpQG2SN-5uuqODuYulA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 9 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:22,254] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-42 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,254] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-20 in 5 milliseconds for epoch 0, of which 2 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __consumer_offsets-21 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,255] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-17 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,255] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-30 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,255] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-26 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,255] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-24 in 6 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-12 in 6 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-44 in 6 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-48 in 6 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-16 in 6 milliseconds for epoch 0, of which 6 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,256] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-4 in 7 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,256] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-36 in 7 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,255] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-5 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,256] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-38 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,256] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-1 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,256] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-8 in 7 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,256] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-34 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,256] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-40 in 7 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,257] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-28 in 8 milliseconds for epoch 0, of which 7 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,257] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-0 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-16 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __consumer_offsets-45 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] INFO [GroupMetadataManager brokerId=2] Finished loading offsets and group metadata from __consumer_offsets-32 in 8 milliseconds for epoch 0, of which 8 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-12 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-41 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-24 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __consumer_offsets-20 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-49 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-0 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 4, 2], zkVersion=0, replicas=[3, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-29 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-25 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __consumer_offsets-8 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 1, 4], zkVersion=0, replicas=[3, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-37 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-4 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=1, leader=3, leaderEpoch=0, isr=[3, 2, 1], zkVersion=0, replicas=[3, 2, 1], offlineReplicas=[]) for partition __consumer_offsets-33 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-15 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-48 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-11 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __consumer_offsets-44 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-23 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-19 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 4, 3], zkVersion=0, replicas=[2, 4, 3], offlineReplicas=[]) for partition __consumer_offsets-32 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-28 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-7 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 1, 4], zkVersion=0, replicas=[2, 1, 4], offlineReplicas=[]) for partition __consumer_offsets-40 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-3 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=1, leader=2, leaderEpoch=0, isr=[2, 3, 1], zkVersion=0, replicas=[2, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-36 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-47 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-14 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-43 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-10 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 3, 4], zkVersion=0, replicas=[1, 3, 4], offlineReplicas=[]) for partition __consumer_offsets-22 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-18 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 3, 1], zkVersion=0, replicas=[4, 3, 1], offlineReplicas=[]) for partition __consumer_offsets-31 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-27 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 2, 3], zkVersion=0, replicas=[4, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-39 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 2, 3], zkVersion=0, replicas=[1, 2, 3], offlineReplicas=[]) for partition __consumer_offsets-6 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,257] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=1, leader=4, leaderEpoch=0, isr=[4, 1, 2], zkVersion=0, replicas=[4, 1, 2], offlineReplicas=[]) for partition __consumer_offsets-35 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,258] TRACE [Broker id=2] Cached leader info UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=1, leader=1, leaderEpoch=0, isr=[1, 4, 2], zkVersion=0, replicas=[1, 4, 2], offlineReplicas=[]) for partition __consumer_offsets-2 in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,258] INFO [Broker id=2] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 2 epoch 1 with correlation id 9 (state.change.logger)
[2022-10-04 16:53:22,258] TRACE [Controller id=2 epoch=1] Received response LeaderAndIsrResponseData(errorCode=0, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=2axtpQG2SN-5uuqODuYulA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=0), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=0)])]) for request LEADER_AND_ISR with correlation id 7 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:22,258] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 10 sent to broker 172.99.0.5:9092 (id: 4 rack: null) (state.change.logger)
[2022-10-04 16:53:22,258] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 9 sent to broker 172.99.0.3:9092 (id: 2 rack: null) (state.change.logger)
[2022-10-04 16:53:22,258] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-3 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-18 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-41 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-29 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-14 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-33 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-23 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-38 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-11 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-26 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-45 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-15 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-30 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-35 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-5 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-39 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-9 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-27 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-42 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-2 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-21 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-6 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-47 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,259] INFO [GroupMetadataManager brokerId=2] Finished unloading __consumer_offsets-17 for coordinator epoch Some(0). Removed 0 cached offsets and 0 cached groups. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:22,261] TRACE [Controller id=2 epoch=1] Received response UpdateMetadataResponseData(errorCode=0) for request UPDATE_METADATA with correlation id 8 sent to broker 172.99.0.6:9092 (id: 1 rack: null) (state.change.logger)
[2022-10-04 16:53:22,280] INFO [GroupCoordinator 2]: Dynamic member with unknown member id joins group bench in Empty state. Created a new member id consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca and request the member to rejoin with this id. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,291] INFO [GroupCoordinator 2]: Preparing to rebalance group bench in state PreparingRebalance with old generation 0 (__consumer_offsets-32) (reason: Adding new member consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca with group instance id None) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-30 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-29 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-29, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-30, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-14 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-45 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-14, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-45, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-15 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-41 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-42 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-15, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-42, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-41, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-47 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-9 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-26 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-47, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-9, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-26, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-27 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-21 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-27, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-21, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-38 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-11 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-5 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-11, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-38, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-5, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-39 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-6 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,426] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-33 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-6, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,426] INFO [UnifiedLog partition=__consumer_offsets-39, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-33, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-18 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=3, fetcherId=0] Truncating partition __consumer_offsets-17 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-23 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-18, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-17, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-23, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=1, fetcherId=0] Truncating partition __consumer_offsets-2 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-35 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-2, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-35, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:22,427] INFO [ReplicaFetcher replicaId=2, leaderId=4, fetcherId=0] Truncating partition __consumer_offsets-3 with TruncationState(offset=0, completed=true) due to local high watermark 0 (kafka.server.ReplicaFetcherThread)
[2022-10-04 16:53:22,427] INFO [UnifiedLog partition=__consumer_offsets-3, dir=/var/lib/kafka/data] Truncating to 0 has no effect as the largest offset in the log is -1 (kafka.log.UnifiedLog)
[2022-10-04 16:53:25,297] INFO [GroupCoordinator 2]: Stabilized group bench generation 1 (__consumer_offsets-32) with 1 members (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:25,308] INFO [GroupCoordinator 2]: Assignment received from leader consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca for group bench for generation 1. The group has 1 members, 0 of which are static. (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:53:30,370] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:30,481] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:30,591] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:30,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:30,812] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:30,922] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,032] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,252] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,475] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,586] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,806] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:31,917] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,027] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,137] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,248] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,357] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,576] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,686] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,796] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:32,906] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,016] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,126] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,242] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,352] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,462] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,570] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,681] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,790] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:33,901] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,011] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,122] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,232] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,343] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,452] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,562] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,669] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,781] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:34,890] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,001] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,111] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,221] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,331] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,442] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,552] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,662] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,770] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,881] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:35,991] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,211] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,322] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,432] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,542] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,651] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,762] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,869] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:36,979] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,090] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,201] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,311] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,421] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,531] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,641] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,751] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,862] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:37,969] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,080] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,191] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,300] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,411] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,520] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,632] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,741] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,851] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:38,961] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,069] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,180] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,290] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,400] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,511] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,621] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,731] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,841] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:39,951] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,169] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,280] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,390] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,500] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,610] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,721] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,831] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:40,941] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,051] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,161] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,269] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,380] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,490] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,600] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,711] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,820] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:41,931] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,041] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,151] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,262] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,370] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,480] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,585] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,695] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,805] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:42,915] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,026] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,136] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,246] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,574] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,684] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,790] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:43,900] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,010] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,116] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,226] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,340] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,451] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,561] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,669] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,780] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:44,890] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,000] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,110] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,221] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,330] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,441] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,551] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,661] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,769] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,879] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:45,985] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,095] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,206] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,421] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,530] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,641] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,861] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:46,969] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,080] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,190] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,296] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,405] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,625] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,735] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,841] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:47,950] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,061] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,168] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,279] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,385] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,494] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,600] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,710] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,820] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:48,930] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,040] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,150] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,260] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,365] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,473] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,579] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,684] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,790] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:49,899] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,110] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,220] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,330] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,441] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,555] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,666] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,774] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,879] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:50,985] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,095] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,205] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,310] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,419] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,530] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,640] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,860] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:51,968] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,079] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,184] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,290] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,405] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,515] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,620] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,730] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,835] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:52,940] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,050] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,155] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,266] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,374] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,479] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,585] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,695] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,805] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:53,915] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,025] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,135] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,245] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,460] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,565] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,674] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,885] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:54,994] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,099] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,205] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,420] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,530] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,640] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,745] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,855] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:55,965] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,074] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,179] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,289] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,399] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,509] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,615] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,725] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,830] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:56,939] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,045] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,156] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,265] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,374] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,479] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,589] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,694] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,800] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:57,909] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,014] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,120] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,229] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,335] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,445] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,554] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,660] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,769] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:58,984] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,089] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,199] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,304] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,410] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,515] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,730] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,835] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:53:59,944] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,050] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,156] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,265] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,479] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,584] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,694] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,799] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:00,904] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,014] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,119] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,225] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,330] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,440] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,545] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,655] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,764] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,874] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:01,984] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,094] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,200] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,305] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,414] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,519] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,625] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,734] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,839] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:02,945] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,050] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,160] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,268] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,379] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,489] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,594] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,699] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,805] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:03,914] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,019] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,125] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,234] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,344] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,450] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,560] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,668] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,884] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:04,994] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,099] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,205] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,419] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,529] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,635] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,740] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,850] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:05,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,060] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,168] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,278] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,384] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,489] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,704] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,814] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:06,920] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,029] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,245] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,355] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,464] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,573] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,679] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,784] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,894] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:07,999] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,104] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,219] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,325] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,434] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,539] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,645] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,755] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,860] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:08,968] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,079] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,183] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,289] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,394] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,504] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,609] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,719] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,825] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:09,930] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,145] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,254] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,360] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,465] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,573] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,678] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,784] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,889] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:10,994] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,104] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,214] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,319] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,425] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,534] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,645] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,750] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,859] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:11,965] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,073] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,179] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,283] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,388] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,493] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,599] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,705] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,814] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:12,919] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,024] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,134] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,345] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,560] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,668] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:13,989] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,094] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,199] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,304] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,409] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,519] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,730] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,839] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:14,945] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,160] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,265] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,479] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,689] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,794] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:15,904] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,009] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,118] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,224] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,329] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,434] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,540] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,646] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,754] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,860] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:16,965] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,073] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,178] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,283] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,389] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,709] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,814] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:17,919] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,024] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,134] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,345] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,665] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,773] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:18,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,089] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,299] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,404] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,619] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,725] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,829] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:19,934] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,250] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,564] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,673] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,779] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:20,989] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,204] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,309] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,419] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,524] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,629] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:21,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:22,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,113] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,219] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,324] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,428] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,534] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,639] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,744] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,850] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:23,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,059] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,164] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,273] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,378] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,483] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,588] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,694] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,799] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:24,904] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,009] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,113] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,219] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,324] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,346] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,429] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,534] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,639] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,744] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,850] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:25,954] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,059] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,164] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,268] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,478] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,689] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:26,899] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,113] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,219] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,324] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,428] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,534] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,639] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,744] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,849] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:27,955] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,064] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,168] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,278] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,383] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,489] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,703] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,809] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:28,914] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,019] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,124] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,230] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,334] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,439] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,545] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,654] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,759] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,865] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:29,973] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,078] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,184] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,288] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,393] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,499] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,709] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,814] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:30,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,024] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,129] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,234] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,339] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,445] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,549] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,654] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,759] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,864] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:31,968] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,077] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,183] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,288] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,394] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,709] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,813] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:32,919] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,024] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,133] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,344] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,449] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,554] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,659] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,766] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,873] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:33,978] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,083] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,189] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,294] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,398] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,503] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,608] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,714] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,819] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:34,924] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,029] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,134] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,345] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,664] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,773] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:35,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,194] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,298] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,509] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,719] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,824] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:36,928] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,034] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,244] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,664] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,772] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,878] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:37,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,298] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,404] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,614] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,719] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,824] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:38,929] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,034] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,244] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,349] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,564] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,884] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:39,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,199] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,619] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,829] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:40,934] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,564] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,668] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:41,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,199] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,304] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,409] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,724] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:42,934] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,564] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,668] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:43,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,198] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,409] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,724] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:44,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,667] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:45,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,099] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,414] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,729] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:46,939] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,044] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,149] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,254] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,359] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,464] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,573] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,678] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,888] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:47,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,414] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,729] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:48,938] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,044] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,149] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,253] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,360] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,464] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,678] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,784] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,888] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:49,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,105] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,845] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:50,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,478] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:51,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:52,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,373] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,478] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,582] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:53,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,214] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,319] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:54,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,794] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:55,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,214] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,529] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:56,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:57,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,319] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:58,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,478] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:54:59,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:00,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:01,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,214] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:02,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,792] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:03,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,109] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:04,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,053] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,582] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:05,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:06,948] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:07,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,004] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,319] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,424] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,739] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,844] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:08,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:09,897] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,214] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,529] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:10,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:11,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,529] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:12,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,264] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,368] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,477] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,688] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,793] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:13,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,213] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,634] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:14,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,159] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,347] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,473] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,578] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,683] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,788] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,893] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:15,998] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,103] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,628] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,734] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:16,944] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,049] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,154] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,258] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,364] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,577] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,682] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,788] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,894] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:17,998] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,103] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,314] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,629] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:18,944] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,049] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,154] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,258] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,364] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,783] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:19,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,834] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:20,939] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,044] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,254] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,359] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,464] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,783] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:21,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,624] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,834] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:22,939] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,254] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,359] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,463] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,567] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,673] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:23,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:24,934] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,038] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,353] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,564] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,667] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:25,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,514] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,829] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:26,934] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,038] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,459] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,669] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:27,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,198] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,829] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:28,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,038] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,143] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,354] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,667] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,773] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,877] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:29,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,299] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,719] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,823] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:30,928] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,034] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,244] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,664] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,772] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,877] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:31,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,198] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,619] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:32,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,353] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,669] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,773] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,877] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:33,983] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,193] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,298] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,718] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,824] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:34,928] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,033] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,139] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,244] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,454] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,664] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,767] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,872] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:35,977] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,082] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,188] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,293] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,397] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,503] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,608] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,713] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,818] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:36,923] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,028] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,134] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,239] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,343] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,448] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,554] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,659] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,763] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,867] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:37,972] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,078] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,182] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,287] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,393] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,707] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,813] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:38,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,128] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,233] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,338] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,444] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,548] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,653] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,758] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,864] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:39,972] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,077] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,182] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,288] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,393] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,497] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,708] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,813] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:40,919] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,128] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,233] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,339] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,443] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,548] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,653] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,759] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,864] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:41,972] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,077] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,183] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,288] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,392] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,603] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,707] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,813] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:42,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,129] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,233] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,338] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,443] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,549] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,654] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,758] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,863] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:43,967] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,072] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,177] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,282] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,388] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,493] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,808] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:44,913] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,333] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,438] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,543] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,649] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,753] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,858] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:45,964] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,072] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,177] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,282] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,388] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,493] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,597] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,808] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:46,913] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,228] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,333] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,438] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,543] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,648] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,753] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,858] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:47,964] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,072] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,177] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,282] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,388] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,492] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,703] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,808] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:48,913] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,228] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,333] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,439] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,543] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,648] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,753] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,859] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:49,963] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,067] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,172] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,278] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,382] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,593] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,698] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,803] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:50,908] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,013] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,118] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,223] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,328] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,433] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,538] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,644] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,749] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,853] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:51,958] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,063] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,167] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,271] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,377] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,482] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,587] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,693] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,797] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:52,903] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,008] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,113] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,218] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,323] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,428] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,533] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,638] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,744] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,848] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:53,953] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,058] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,164] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,266] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,372] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,478] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,583] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,687] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,792] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:54,898] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,003] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,108] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,212] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,318] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,423] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,528] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,633] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,738] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,843] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:55,949] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,054] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,158] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,263] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,367] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,472] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,577] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,682] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,788] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,893] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:56,997] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,102] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,313] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,628] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:57,944] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,153] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,259] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,472] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,577] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,682] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,788] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,893] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:58,998] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,103] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,208] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,313] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,418] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,523] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,628] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,839] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:55:59,943] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,153] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,259] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,364] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,467] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,887] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:00,993] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,098] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:01,938] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,149] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,253] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,358] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,463] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,567] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:02,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:03,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,248] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,353] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,777] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,883] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:04,988] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,092] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,197] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,627] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,733] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,838] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:05,943] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,048] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,153] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,258] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,363] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,466] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,572] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,677] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,782] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,888] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:06,992] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,097] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,203] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,308] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,413] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,518] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,623] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,728] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,833] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:07,939] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,043] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,148] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,253] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,359] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,463] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,567] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,672] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,778] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,882] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:08,987] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,093] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,198] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,303] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,408] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,513] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,618] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,723] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,828] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:09,933] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,038] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,144] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,249] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,353] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,458] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,563] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,666] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,772] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,877] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:10,982] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,088] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,192] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,297] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,403] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,508] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,613] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,717] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,823] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:11,928] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,033] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,138] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,243] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,348] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,453] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,559] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,663] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,767] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,873] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:12,977] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,082] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,187] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,293] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,398] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,502] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,608] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,713] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,818] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:13,923] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,028] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,133] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,238] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,343] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,449] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,554] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,658] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,763] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,867] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:14,972] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,077] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,182] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,287] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,351] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,393] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,498] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,602] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,708] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,813] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:15,918] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,023] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,128] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,233] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,338] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,443] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,548] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,654] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,758] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,863] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:16,967] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,072] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,177] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,282] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,388] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,493] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,598] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,702] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,808] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:17,913] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,018] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,123] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,227] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,333] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,438] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,543] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,648] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,754] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,858] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:18,963] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,067] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,172] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,277] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,382] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,487] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,593] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,698] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,802] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:19,907] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,013] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,118] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,223] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,328] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,433] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,538] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,643] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,748] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,853] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:20,958] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,063] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,172] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,277] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,382] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,488] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,593] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:21,697] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:25,350] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:27,039] WARN [GroupMetadataManager brokerId=2] group: bench with leader: consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca has received offset commits from consumers as well as transactional producers. Mixing both types of offset commits will generally result in surprises and should be avoided. (kafka.coordinator.group.GroupMetadataManager)
[2022-10-04 16:56:27,045] INFO [GroupCoordinator 2]: Preparing to rebalance group bench in state PreparingRebalance with old generation 1 (__consumer_offsets-32) (reason: Removing member consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca on LeaveGroup) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:56:27,046] INFO [GroupCoordinator 2]: Group bench with generation 2 is now empty (__consumer_offsets-32) (kafka.coordinator.group.GroupCoordinator)
[2022-10-04 16:56:27,048] INFO [GroupCoordinator 2]: Member MemberMetadata(memberId=consumer-bench-1-bf4026cb-80f0-4b3a-b70a-7bffba3f37ca, groupInstanceId=None, clientId=consumer-bench-1, clientHost=/172.99.0.15, sessionTimeoutMs=45000, rebalanceTimeoutMs=300000, supportedProtocols=List(range, cooperative-sticky)) has left group bench through explicit `LeaveGroup` request (kafka.coordinator.group.GroupCoordinator)
